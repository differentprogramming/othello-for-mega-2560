#include <stdint.h>

#define INT_MAX 2147483647

// consolegame.cpp : Defines the entry point for the console application.
//

#define __min(x,y) (x)<(y)?(x):(y)

char *gets(char * b,size_t maxlen)
{
  int len=0;
  while(Serial.available()==0) delay(100);
  while (Serial.available()!=0 && len<(int)maxlen-1){
    b[len++]=Serial.read();
    delay(2);//I seem to have to delay enough to get the next byte at 9600 baud
  }
  b[len]=0;
  return b;
}
int blink_counter = 20000;
bool blink_state=false;
void blink()
{
  if (blink_counter--<1) {
    if (blink_state) digitalWrite(13, LOW);
    else digitalWrite(13, HIGH);
    blink_state = !blink_state;
    blink_counter = 20000;
  }
}


#define pgm_read_word_far_index(address_long,index) pgm_read_word_far((far_ptr_t)(address_long)+((index)<<1))

//#define NO_OPTIMIZATION

#define Square uint8_t

#define SafetyT unsigned

#define BoardLine unsigned


typedef SafetyT CompressedBoard[8];

typedef Square BoardArray[100];
struct ValTriple { int8_t pos; int8_t dir; int8_t len; };
const ValTriple Valuations[] =
{
  { 81,1,8 },{ 71,1,8 },
  { 61,1,8 },{ 51,1,8 },
  { 41,1,8 },{ 31,1,8 },
  { 21,1,8 },{ 11,1,8 },
  { 81,11,1 },{ 18,11,1 },
  { 71,11,2 },{ 17,11,2 },
  { 61,11,3 },{ 16,11,3 },
  { 51,11,4 },{ 15,11,4 },
  { 41,11,5 },{ 14,11,5 },
  { 31,11,6 },{ 13,11,6 },
  { 21,11,7 },{ 12,11,7 },
  { 11,9,1 },{ 88,9,1 },
  { 11,10,8 },{ 12,10,8 },
  { 12,9,2 },{ 78,9,2 },
  { 13,9,3 },{ 68,9,3 },
  { 13,10,8 },{ 14,10,8 },
  { 14,9,4 },{ 58,9,4 },
  { 15,9,5 },{ 48,9,5 },
  { 15,10,8 },{ 16,10,8 },
  { 16,9,6 },{ 38,9,6 },
  { 17,9,7 },{ 28,9,7 },
  { 17,10,8 },{ 18,10,8 },
  { 18,9,8 },
  { 11,11,8 },
  { 0,0,0 }
};
const SafetyT compress_a[256] PROGMEM = {
0, 1, 2, 3, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 9, 10, 11, 12, 12, 13, 14, 15, 15, 16, 17, 18, 18, 19, 20, 21, 
18, 19, 20, 21, 21, 22, 23, 24, 24, 25, 26, 27, 27, 28, 29, 30, 27, 28, 29, 30, 30, 31, 32, 33, 33, 34, 35, 36, 36, 37, 38, 39, 
27, 28, 29, 30, 30, 31, 32, 33, 33, 34, 35, 36, 36, 37, 38, 39, 36, 37, 38, 39, 39, 40, 41, 42, 42, 43, 44, 45, 45, 46, 47, 48, 
45, 46, 47, 48, 48, 49, 50, 51, 51, 52, 53, 54, 54, 55, 56, 57, 54, 55, 56, 57, 57, 58, 59, 60, 60, 61, 62, 63, 63, 64, 65, 66, 
54, 55, 56, 57, 57, 58, 59, 60, 60, 61, 62, 63, 63, 64, 65, 66, 63, 64, 65, 66, 66, 67, 68, 69, 69, 70, 71, 72, 72, 73, 74, 75, 
72, 73, 74, 75, 75, 76, 77, 78, 78, 79, 80, 81, 81, 82, 83, 84, 81, 82, 83, 84, 84, 85, 86, 87, 87, 88, 89, 90, 90, 91, 92, 93, 
81, 82, 83, 84, 84, 85, 86, 87, 87, 88, 89, 90, 90, 91, 92, 93, 90, 91, 92, 93, 93, 94, 95, 96, 96, 97, 98, 99, 99, 100, 101, 102, 
99, 100, 101, 102, 102, 103, 104, 105, 105, 106, 107, 108, 108, 109, 110, 111, 108, 109, 110, 111, 111, 112, 113, 114, 114, 115, 116, 117, 117, 118, 119, 120, 
};

const SafetyT compress_b[256] PROGMEM = 
{
81, 162, 243, 243, 324, 405, 486, 486, 567, 648, 729, 729, 810, 891, 972, 729, 810, 891, 972, 972, 1053, 1134, 1215, 1215, 1296, 1377, 1458, 1458, 1539, 1620, 1701, 
1458, 1539, 1620, 1701, 1701, 1782, 1863, 1944, 1944, 2025, 2106, 2187, 2187, 2268, 2349, 2430, 2187, 2268, 2349, 2430, 2430, 2511, 2592, 2673, 2673, 2754, 2835, 2916, 2916, 2997, 3078, 3159, 
2187, 2268, 2349, 2430, 2430, 2511, 2592, 2673, 2673, 2754, 2835, 2916, 2916, 2997, 3078, 3159, 2916, 2997, 3078, 3159, 3159, 3240, 3321, 3402, 3402, 3483, 3564, 3645, 3645, 3726, 3807, 3888, 
3645, 3726, 3807, 3888, 3888, 3969, 4050, 4131, 4131, 4212, 4293, 4374, 4374, 4455, 4536, 4617, 4374, 4455, 4536, 4617, 4617, 4698, 4779, 4860, 4860, 4941, 5022, 5103, 5103, 5184, 5265, 5346, 
4374, 4455, 4536, 4617, 4617, 4698, 4779, 4860, 4860, 4941, 5022, 5103, 5103, 5184, 5265, 5346, 5103, 5184, 5265, 5346, 5346, 5427, 5508, 5589, 5589, 5670, 5751, 5832, 5832, 5913, 5994, 6075, 
5832, 5913, 5994, 6075, 6075, 6156, 6237, 6318, 6318, 6399, 6480, 6561, 6561, 6642, 6723, 6804, 6561, 6642, 6723, 6804, 6804, 6885, 6966, 7047, 7047, 7128, 7209, 7290, 7290, 7371, 7452, 7533, 
6561, 6642, 6723, 6804, 6804, 6885, 6966, 7047, 7047, 7128, 7209, 7290, 7290, 7371, 7452, 7533, 7290, 7371, 7452, 7533, 7533, 7614, 7695, 7776, 7776, 7857, 7938, 8019, 8019, 8100, 8181, 8262, 
8019, 8100, 8181, 8262, 8262, 8343, 8424, 8505, 8505, 8586, 8667, 8748, 8748, 8829, 8910, 8991, 8748, 8829, 8910, 8991, 8991, 9072, 9153, 9234, 9234, 9315, 9396, 9477, 9477, 9558, 9639, 9720, 
};

void init_compress()
{
}
//reduce cache pressure by converting base 3 index to compressed form
inline SafetyT compress3(BoardLine c)
{
  return pgm_read_word(&compress_a[c & 255]) + pgm_read_word(&compress_b[c >> 8]);
}


const int QUIESCENT_DEPTH = 0;

const Square Out = 4;
const Square Empty = 0;
const Square White = 1;
const Square Black = 2;
//black p
const int8_t simple_sum[] = { 0,1,-1,0,0 };
const int empty_sum[5] = { 1,0,0,0,0 };

typedef Square BoardLineArray[10];
const int NUMDIR = 8;
const int Directions[] = { 11,9,-11,-9,1,-1,10,-10,0 };
const int LineDirections[] = { 1,-1,0 };

const SafetyT SafetyT1[3] PROGMEM = {
  3,
  1, 2,
};
const SafetyT SafetyT2[9] PROGMEM = {
  15,
  13, 14, 7, 5, 6, 11, 9, 10,
};
const SafetyT SafetyT3[27] PROGMEM = {
  63,
  61, 62, 63, 53, 62, 63, 61, 58, 31, 29, 30, 23, 21, 22, 31, 25, 26, 47, 45, 46, 47, 37, 38, 43, 41, 42,
};
const SafetyT SafetyT4[81] PROGMEM = {
  255,
  253, 254, 255, 245, 254, 255, 253, 250, 255, 253, 254, 255, 213, 254, 255, 249, 250, 255, 253, 254, 255, 245, 246, 255, 253, 234, 127,
  125, 126, 127, 117, 126, 127, 125, 122, 95, 93, 94, 87, 85, 86, 95, 89, 90, 127, 125, 126, 111, 101, 102, 127, 105, 106, 191,
  189, 190, 191, 181, 190, 191, 189, 186, 191, 189, 190, 191, 149, 150, 159, 153, 154, 175, 173, 174, 175, 165, 166, 171, 169, 170,
};
const SafetyT SafetyT5[243] PROGMEM = {
  1023,
  1021, 1022, 1023, 1013, 1022, 1023, 1021, 1018, 1023, 1021, 1022, 1023, 981, 1022, 1023, 1021, 1018, 1023, 1021, 1022, 1023, 1013, 1022, 1023, 1021, 1002, 1023,
  1021, 1022, 1023, 1013, 1022, 1023, 1021, 1018, 1023, 1021, 1022, 1023, 853, 1022, 1023, 1017, 1018, 1023, 1021, 1022, 1007, 997, 998, 1023, 1001, 1002, 1023,
  1021, 1022, 1023, 1013, 1022, 1023, 1021, 1018, 1023, 1021, 1022, 1023, 981, 982, 991, 985, 986, 1023, 1021, 1022, 1023, 1013, 1014, 1023, 1021, 938, 511,
  509, 510, 511, 501, 510, 511, 509, 506, 511, 509, 510, 511, 469, 510, 511, 505, 506, 511, 509, 510, 511, 501, 502, 511, 509, 490, 383,
  381, 382, 383, 373, 382, 383, 381, 378, 351, 349, 350, 343, 341, 342, 351, 345, 346, 383, 381, 382, 367, 357, 358, 383, 361, 362, 511,
  509, 510, 511, 501, 510, 511, 509, 506, 511, 445, 446, 447, 405, 406, 415, 409, 410, 511, 509, 510, 431, 421, 422, 511, 425, 426, 767,
  765, 766, 767, 757, 766, 767, 765, 762, 767, 765, 766, 767, 725, 766, 767, 761, 762, 767, 765, 766, 767, 757, 758, 767, 765, 746, 767,
  765, 766, 767, 757, 766, 767, 765, 762, 767, 765, 766, 767, 597, 598, 607, 601, 602, 767, 637, 638, 623, 613, 614, 639, 617, 618, 703,
  701, 702, 703, 693, 702, 703, 701, 698, 703, 701, 702, 703, 661, 662, 671, 665, 666, 687, 685, 686, 687, 677, 678, 683, 681, 682,
};
const SafetyT SafetyT6[729] PROGMEM = {
  4095,
  4093, 4094, 4095, 4085, 4094, 4095, 4093, 4090, 4095, 4093, 4094, 4095, 4053, 4094, 4095, 4093, 4090, 4095, 4093, 4094, 4095, 4085, 4094, 4095, 4093, 4074, 4095,
  4093, 4094, 4095, 4085, 4094, 4095, 4093, 4090, 4095, 4093, 4094, 4095, 3925, 4094, 4095, 4093, 4090, 4095, 4093, 4094, 4095, 4085, 4086, 4095, 4093, 4074, 4095,
  4093, 4094, 4095, 4085, 4094, 4095, 4093, 4090, 4095, 4093, 4094, 4095, 4053, 4094, 4095, 4089, 4090, 4095, 4093, 4094, 4095, 4085, 4094, 4095, 4093, 4010, 4095,
  4093, 4094, 4095, 4085, 4094, 4095, 4093, 4090, 4095, 4093, 4094, 4095, 4053, 4094, 4095, 4089, 4090, 4095, 4093, 4094, 4095, 4085, 4094, 4095, 4093, 4074, 4095,
  4093, 4094, 4095, 4085, 4094, 4095, 4093, 4090, 4095, 4093, 4094, 4095, 3413, 4094, 4095, 4089, 4090, 4095, 4093, 4094, 4079, 4069, 4070, 4095, 4073, 4074, 4095,
  4093, 4094, 4095, 4085, 4094, 4095, 4093, 4090, 4095, 4029, 4030, 4031, 3989, 3990, 3999, 3993, 3994, 4095, 4093, 4094, 4015, 4005, 4006, 4095, 4009, 4010, 4095,
  4093, 4094, 4095, 4085, 4094, 4095, 4093, 4090, 4095, 4093, 4094, 4095, 4053, 4094, 4095, 4093, 4090, 4095, 4093, 4094, 4095, 4085, 4086, 4095, 4093, 4074, 4095,
  4093, 4094, 4095, 4085, 4094, 4095, 4093, 4090, 4095, 4093, 4094, 4095, 3925, 3926, 3935, 3929, 3930, 4095, 3965, 3966, 3951, 3941, 3942, 3967, 3945, 3946, 4095,
  4093, 4094, 4095, 4085, 4094, 4095, 4093, 4090, 4095, 4093, 4094, 4095, 4053, 4054, 4063, 4057, 4058, 4095, 4093, 4094, 4095, 4085, 4086, 4095, 4093, 3754, 2047,
  2045, 2046, 2047, 2037, 2046, 2047, 2045, 2042, 2047, 2045, 2046, 2047, 2005, 2046, 2047, 2045, 2042, 2047, 2045, 2046, 2047, 2037, 2046, 2047, 2045, 2026, 2047,
  2045, 2046, 2047, 2037, 2046, 2047, 2045, 2042, 2047, 2045, 2046, 2047, 1877, 2046, 2047, 2041, 2042, 2047, 2045, 2046, 2031, 2021, 2022, 2047, 2025, 2026, 2047,
  2045, 2046, 2047, 2037, 2046, 2047, 2045, 2042, 2047, 2045, 2046, 2047, 2005, 2006, 2015, 2009, 2010, 2047, 2045, 2046, 2047, 2037, 2038, 2047, 2045, 1962, 1535,
  1533, 1534, 1535, 1525, 1534, 1535, 1533, 1530, 1535, 1533, 1534, 1535, 1493, 1534, 1535, 1529, 1530, 1535, 1533, 1534, 1535, 1525, 1526, 1535, 1533, 1514, 1407,
  1405, 1406, 1407, 1397, 1406, 1407, 1405, 1402, 1375, 1373, 1374, 1367, 1365, 1366, 1375, 1369, 1370, 1407, 1405, 1406, 1391, 1381, 1382, 1407, 1385, 1386, 1535,
  1533, 1534, 1535, 1525, 1534, 1535, 1533, 1530, 1535, 1469, 1470, 1471, 1429, 1430, 1439, 1433, 1434, 1535, 1533, 1534, 1455, 1445, 1446, 1535, 1449, 1450, 2047,
  2045, 2046, 2047, 2037, 2046, 2047, 2045, 2042, 2047, 2045, 2046, 2047, 2005, 2046, 2047, 2041, 2042, 2047, 2045, 2046, 2047, 2037, 2038, 2047, 2045, 2026, 2047,
  2045, 2046, 1791, 1781, 1790, 2047, 1789, 1786, 2047, 1789, 1790, 1791, 1621, 1622, 1631, 1625, 1626, 1791, 1661, 1662, 1647, 1637, 1638, 1663, 1641, 1642, 2047,
  2045, 2046, 2047, 2037, 2046, 2047, 2045, 2042, 2047, 1725, 1726, 1727, 1685, 1686, 1695, 1689, 1690, 2047, 2045, 2046, 1711, 1701, 1702, 2047, 1705, 1706, 3071,
  3069, 3070, 3071, 3061, 3070, 3071, 3069, 3066, 3071, 3069, 3070, 3071, 3029, 3070, 3071, 3069, 3066, 3071, 3069, 3070, 3071, 3061, 3070, 3071, 3069, 3050, 3071,
  3069, 3070, 3071, 3061, 3070, 3071, 3069, 3066, 3071, 3069, 3070, 3071, 2901, 3070, 3071, 3065, 3066, 3071, 3069, 3070, 3055, 3045, 3046, 3071, 3049, 3050, 3071,
  3069, 3070, 3071, 3061, 3070, 3071, 3069, 3066, 3071, 3069, 3070, 3071, 3029, 3030, 3039, 3033, 3034, 3071, 3069, 3070, 3071, 3061, 3062, 3071, 3069, 2986, 3071,
  3069, 3070, 3071, 3061, 3070, 3071, 3069, 3066, 3071, 3069, 3070, 3071, 3029, 3070, 3071, 3065, 3066, 3071, 3069, 3070, 3071, 3061, 3062, 3071, 3069, 3050, 3071,
  3069, 3070, 3071, 3061, 3070, 3071, 3069, 3066, 3071, 3069, 3070, 3071, 2389, 2390, 2399, 2393, 2394, 3071, 2429, 2430, 2415, 2405, 2406, 2431, 2409, 2410, 3071,
  3069, 3070, 3071, 2549, 2558, 2559, 2557, 2554, 2559, 2493, 2494, 2495, 2453, 2454, 2463, 2457, 2458, 3071, 2557, 2558, 2479, 2469, 2470, 2559, 2473, 2474, 2815,
  2813, 2814, 2815, 2805, 2814, 2815, 2813, 2810, 2815, 2813, 2814, 2815, 2773, 2814, 2815, 2809, 2810, 2815, 2813, 2814, 2815, 2805, 2806, 2815, 2813, 2794, 2815,
  2813, 2814, 2815, 2805, 2814, 2815, 2813, 2810, 2815, 2813, 2814, 2815, 2645, 2646, 2655, 2649, 2650, 2815, 2685, 2686, 2671, 2661, 2662, 2687, 2665, 2666, 2751,
  2749, 2750, 2751, 2741, 2750, 2751, 2749, 2746, 2751, 2749, 2750, 2751, 2709, 2710, 2719, 2713, 2714, 2735, 2733, 2734, 2735, 2725, 2726, 2731, 2729, 2730,
};
const SafetyT SafetyT7[2187] PROGMEM = {
  16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16341, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16373, 16382, 16383, 16381, 16362, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16213, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16373, 16382, 16383, 16381, 16362, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16341, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16373, 16382, 16383, 16381, 16298, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16341, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16373, 16382, 16383, 16381, 16362, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 15701, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16373, 16374, 16383, 16381, 16362, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16341, 16342, 16351, 16345, 16346, 16383, 16381, 16382, 16383, 16373, 16374, 16383, 16381, 16298, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16341, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16373, 16382, 16383, 16381, 16362, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16213, 16382, 16383, 16377, 16378, 16383, 16381, 16382, 16367, 16357, 16358, 16383, 16361, 16362, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16341, 16382, 16383, 16377, 16378, 16383, 16381, 16382, 16383, 16373, 16382, 16383, 16381, 16042, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16341, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16373, 16382, 16383, 16381, 16362, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16213, 16382, 16383, 16377, 16378, 16383, 16381, 16382, 16367, 16357, 16358, 16383, 16361, 16362, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16341, 16382, 16383, 16377, 16378, 16383, 16381, 16382, 16383, 16373, 16382, 16383, 16381, 16298, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16341, 16382, 16383, 16377, 16378, 16383, 16381, 16382, 16383, 16373, 16382, 16383, 16381, 16362, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 13653, 16382, 16383, 16377, 16378, 16383, 16381, 16382, 16367, 16357, 16358, 16383, 16361, 16362, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16317, 16318, 16319, 16277, 16278, 16287, 16281, 16282, 16383, 16381, 16382, 16303, 16293, 16294, 16383, 16297, 16298, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16341, 16382, 16383, 16377, 16378, 16383, 16381, 16382, 16383, 16373, 16382, 16383, 16381, 16362, 16383,
  16381, 16382, 16127, 16117, 16126, 16383, 16125, 16122, 16383, 16125, 16126, 16127, 15957, 15958, 15967, 15961, 15962, 16127, 15997, 15998, 15983, 15973, 15974, 15999, 15977, 15978, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16061, 16062, 16063, 16021, 16022, 16031, 16025, 16026, 16383, 16381, 16382, 16047, 16037, 16038, 16383, 16041, 16042, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16341, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16373, 16382, 16383, 16381, 16362, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16213, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16373, 16374, 16383, 16381, 16362, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16341, 16342, 16351, 16345, 16346, 16383, 16381, 16382, 16383, 16373, 16374, 16383, 16381, 16298, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16341, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16373, 16374, 16383, 16381, 16362, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 15701, 15702, 15711, 15705, 15706, 16383, 15741, 15742, 15727, 15717, 15718, 15743, 15721, 15722, 16383,
  16381, 16382, 16383, 15861, 15870, 15871, 15869, 15866, 15871, 15805, 15806, 15807, 15765, 15766, 15775, 15769, 15770, 16383, 15869, 15870, 15791, 15781, 15782, 15871, 15785, 15786, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16341, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16373, 16374, 16383, 16381, 16362, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16213, 16214, 16223, 16217, 16218, 16383, 16253, 16254, 16239, 16229, 16230, 16255, 16233, 16234, 16383,
  16381, 16382, 16383, 16373, 16382, 16383, 16381, 16378, 16383, 16381, 16382, 16383, 16341, 16342, 16351, 16345, 16346, 16383, 16381, 16382, 16383, 16373, 16374, 16383, 16381, 15018, 8191,
  8189, 8190, 8191, 8181, 8190, 8191, 8189, 8186, 8191, 8189, 8190, 8191, 8149, 8190, 8191, 8189, 8186, 8191, 8189, 8190, 8191, 8181, 8190, 8191, 8189, 8170, 8191,
  8189, 8190, 8191, 8181, 8190, 8191, 8189, 8186, 8191, 8189, 8190, 8191, 8021, 8190, 8191, 8189, 8186, 8191, 8189, 8190, 8191, 8181, 8182, 8191, 8189, 8170, 8191,
  8189, 8190, 8191, 8181, 8190, 8191, 8189, 8186, 8191, 8189, 8190, 8191, 8149, 8190, 8191, 8185, 8186, 8191, 8189, 8190, 8191, 8181, 8190, 8191, 8189, 8106, 8191,
  8189, 8190, 8191, 8181, 8190, 8191, 8189, 8186, 8191, 8189, 8190, 8191, 8149, 8190, 8191, 8185, 8186, 8191, 8189, 8190, 8191, 8181, 8190, 8191, 8189, 8170, 8191,
  8189, 8190, 8191, 8181, 8190, 8191, 8189, 8186, 8191, 8189, 8190, 8191, 7509, 8190, 8191, 8185, 8186, 8191, 8189, 8190, 8175, 8165, 8166, 8191, 8169, 8170, 8191,
  8189, 8190, 8191, 8181, 8190, 8191, 8189, 8186, 8191, 8125, 8126, 8127, 8085, 8086, 8095, 8089, 8090, 8191, 8189, 8190, 8111, 8101, 8102, 8191, 8105, 8106, 8191,
  8189, 8190, 8191, 8181, 8190, 8191, 8189, 8186, 8191, 8189, 8190, 8191, 8149, 8190, 8191, 8189, 8186, 8191, 8189, 8190, 8191, 8181, 8182, 8191, 8189, 8170, 8191,
  8189, 8190, 8191, 8181, 8190, 8191, 8189, 8186, 8191, 8189, 8190, 8191, 8021, 8022, 8031, 8025, 8026, 8191, 8061, 8062, 8047, 8037, 8038, 8063, 8041, 8042, 8191,
  8189, 8190, 8191, 8181, 8190, 8191, 8189, 8186, 8191, 8189, 8190, 8191, 8149, 8150, 8159, 8153, 8154, 8191, 8189, 8190, 8191, 8181, 8182, 8191, 8189, 7850, 6143,
  6141, 6142, 6143, 6133, 6142, 6143, 6141, 6138, 6143, 6141, 6142, 6143, 6101, 6142, 6143, 6141, 6138, 6143, 6141, 6142, 6143, 6133, 6142, 6143, 6141, 6122, 6143,
  6141, 6142, 6143, 6133, 6142, 6143, 6141, 6138, 6143, 6141, 6142, 6143, 5973, 6142, 6143, 6137, 6138, 6143, 6141, 6142, 6127, 6117, 6118, 6143, 6121, 6122, 6143,
  6141, 6142, 6143, 6133, 6142, 6143, 6141, 6138, 6143, 6141, 6142, 6143, 6101, 6102, 6111, 6105, 6106, 6143, 6141, 6142, 6143, 6133, 6134, 6143, 6141, 6058, 5631,
  5629, 5630, 5631, 5621, 5630, 5631, 5629, 5626, 5631, 5629, 5630, 5631, 5589, 5630, 5631, 5625, 5626, 5631, 5629, 5630, 5631, 5621, 5622, 5631, 5629, 5610, 5503,
  5501, 5502, 5503, 5493, 5502, 5503, 5501, 5498, 5471, 5469, 5470, 5463, 5461, 5462, 5471, 5465, 5466, 5503, 5501, 5502, 5487, 5477, 5478, 5503, 5481, 5482, 5631,
  5629, 5630, 5631, 5621, 5630, 5631, 5629, 5626, 5631, 5565, 5566, 5567, 5525, 5526, 5535, 5529, 5530, 5631, 5629, 5630, 5551, 5541, 5542, 5631, 5545, 5546, 6143,
  6141, 6142, 6143, 6133, 6142, 6143, 6141, 6138, 6143, 6141, 6142, 6143, 6101, 6142, 6143, 6137, 6138, 6143, 6141, 6142, 6143, 6133, 6134, 6143, 6141, 6122, 6143,
  6141, 6142, 5887, 5877, 5886, 6143, 5885, 5882, 6143, 5885, 5886, 5887, 5717, 5718, 5727, 5721, 5722, 5887, 5757, 5758, 5743, 5733, 5734, 5759, 5737, 5738, 6143,
  6141, 6142, 6143, 6133, 6142, 6143, 6141, 6138, 6143, 5821, 5822, 5823, 5781, 5782, 5791, 5785, 5786, 6143, 6141, 6142, 5807, 5797, 5798, 6143, 5801, 5802, 8191,
  8189, 8190, 8191, 8181, 8190, 8191, 8189, 8186, 8191, 8189, 8190, 8191, 8149, 8190, 8191, 8189, 8186, 8191, 8189, 8190, 8191, 8181, 8190, 8191, 8189, 8170, 8191,
  8189, 8190, 8191, 8181, 8190, 8191, 8189, 8186, 8191, 8189, 8190, 8191, 8021, 8190, 8191, 8185, 8186, 8191, 8189, 8190, 8175, 8165, 8166, 8191, 8169, 8170, 8191,
  8189, 8190, 8191, 8181, 8190, 8191, 8189, 8186, 8191, 8189, 8190, 8191, 8149, 8150, 8159, 8153, 8154, 8191, 8189, 8190, 8191, 8181, 8182, 8191, 8189, 8106, 8191,
  8189, 8190, 8191, 8181, 8190, 8191, 8189, 8186, 8191, 7165, 7166, 7167, 7125, 7166, 8191, 7161, 7162, 8191, 8189, 8190, 7167, 7157, 7158, 8191, 7165, 7146, 8191,
  8189, 8190, 7167, 7157, 7166, 8191, 7165, 7162, 8191, 7165, 7166, 7167, 6485, 6486, 6495, 6489, 6490, 7167, 6525, 6526, 6511, 6501, 6502, 6527, 6505, 6506, 8191,
  7165, 7166, 7167, 6645, 6654, 6655, 6653, 6650, 6655, 6589, 6590, 6591, 6549, 6550, 6559, 6553, 6554, 7167, 6653, 6654, 6575, 6565, 6566, 6655, 6569, 6570, 8191,
  8189, 8190, 8191, 8181, 8190, 8191, 8189, 8186, 8191, 8189, 8190, 8191, 8149, 8190, 8191, 8185, 8186, 8191, 8189, 8190, 8191, 8181, 8182, 8191, 8189, 8170, 8191,
  8189, 8190, 6911, 6901, 6910, 8191, 6909, 6906, 8191, 6909, 6910, 6911, 6741, 6742, 6751, 6745, 6746, 6911, 6781, 6782, 6767, 6757, 6758, 6783, 6761, 6762, 8191,
  8189, 8190, 8191, 8181, 8190, 8191, 8189, 8186, 8191, 6845, 6846, 6847, 6805, 6806, 6815, 6809, 6810, 8191, 8189, 8190, 6831, 6821, 6822, 8191, 6825, 6826, 12287,
  12285, 12286, 12287, 12277, 12286, 12287, 12285, 12282, 12287, 12285, 12286, 12287, 12245, 12286, 12287, 12285, 12282, 12287, 12285, 12286, 12287, 12277, 12286, 12287, 12285, 12266, 12287,
  12285, 12286, 12287, 12277, 12286, 12287, 12285, 12282, 12287, 12285, 12286, 12287, 12117, 12286, 12287, 12285, 12282, 12287, 12285, 12286, 12287, 12277, 12278, 12287, 12285, 12266, 12287,
  12285, 12286, 12287, 12277, 12286, 12287, 12285, 12282, 12287, 12285, 12286, 12287, 12245, 12286, 12287, 12281, 12282, 12287, 12285, 12286, 12287, 12277, 12286, 12287, 12285, 12202, 12287,
  12285, 12286, 12287, 12277, 12286, 12287, 12285, 12282, 12287, 12285, 12286, 12287, 12245, 12286, 12287, 12281, 12282, 12287, 12285, 12286, 12287, 12277, 12286, 12287, 12285, 12266, 12287,
  12285, 12286, 12287, 12277, 12286, 12287, 12285, 12282, 12287, 12285, 12286, 12287, 11605, 12286, 12287, 12281, 12282, 12287, 12285, 12286, 12271, 12261, 12262, 12287, 12265, 12266, 12287,
  12285, 12286, 12287, 12277, 12286, 12287, 12285, 12282, 12287, 12221, 12222, 12223, 12181, 12182, 12191, 12185, 12186, 12287, 12285, 12286, 12207, 12197, 12198, 12287, 12201, 12202, 12287,
  12285, 12286, 12287, 12277, 12286, 12287, 12285, 12282, 12287, 12285, 12286, 12287, 12245, 12286, 12287, 12285, 12282, 12287, 12285, 12286, 12287, 12277, 12278, 12287, 12285, 12266, 12287,
  12285, 12286, 12287, 12277, 12286, 12287, 12285, 12282, 12287, 12285, 12286, 12287, 12117, 12118, 12127, 12121, 12122, 12287, 12157, 12158, 12143, 12133, 12134, 12159, 12137, 12138, 12287,
  12285, 12286, 12287, 12277, 12286, 12287, 12285, 12282, 12287, 12285, 12286, 12287, 12245, 12246, 12255, 12249, 12250, 12287, 12285, 12286, 12287, 12277, 12278, 12287, 12285, 11946, 12287,
  12285, 12286, 12287, 12277, 12286, 12287, 12285, 12282, 12287, 12285, 12286, 12287, 12245, 12286, 12287, 12285, 12282, 12287, 12285, 12286, 12287, 12277, 12286, 12287, 12285, 12266, 12287,
  12285, 12286, 12287, 12277, 12286, 12287, 12285, 12282, 12287, 12285, 12286, 12287, 12117, 12286, 12287, 12281, 12282, 12287, 12285, 12286, 12271, 12261, 12262, 12287, 12265, 12266, 12287,
  12285, 12286, 12287, 12277, 12286, 12287, 12285, 12282, 12287, 12285, 12286, 12287, 12245, 12246, 12255, 12249, 12250, 12287, 12285, 12286, 12287, 12277, 12278, 12287, 12285, 12202, 12287,
  12285, 12286, 12287, 12277, 12286, 12287, 12285, 12282, 12287, 12285, 12286, 12287, 12245, 12286, 12287, 12281, 12282, 12287, 12285, 12286, 12287, 12277, 12278, 12287, 12285, 12266, 12287,
  12285, 12286, 12287, 12277, 12286, 12287, 12285, 12282, 12287, 12285, 12286, 12287, 9557, 9558, 9567, 9561, 9562, 12287, 9597, 9598, 9583, 9573, 9574, 9599, 9577, 9578, 12287,
  12285, 12286, 12287, 9717, 9726, 9727, 9725, 9722, 9727, 9661, 9662, 9663, 9621, 9622, 9631, 9625, 9626, 12287, 9725, 9726, 9647, 9637, 9638, 9727, 9641, 9642, 12287,
  12285, 12286, 12287, 12277, 12286, 12287, 12285, 12282, 12287, 12285, 12286, 12287, 10197, 10238, 10239, 10233, 10234, 12287, 10237, 10238, 12287, 10229, 10230, 10239, 10237, 10218, 12287,
  10237, 10238, 9983, 9973, 9982, 10239, 9981, 9978, 10239, 9981, 9982, 9983, 9813, 9814, 9823, 9817, 9818, 9983, 9853, 9854, 9839, 9829, 9830, 9855, 9833, 9834, 12287,
  12285, 12286, 12287, 10229, 10238, 10239, 10237, 10234, 10239, 9917, 9918, 9919, 9877, 9878, 9887, 9881, 9882, 12287, 10237, 10238, 9903, 9893, 9894, 10239, 9897, 9898, 11263,
  11261, 11262, 11263, 11253, 11262, 11263, 11261, 11258, 11263, 11261, 11262, 11263, 11221, 11262, 11263, 11261, 11258, 11263, 11261, 11262, 11263, 11253, 11262, 11263, 11261, 11242, 11263,
  11261, 11262, 11263, 11253, 11262, 11263, 11261, 11258, 11263, 11261, 11262, 11263, 11093, 11262, 11263, 11257, 11258, 11263, 11261, 11262, 11247, 11237, 11238, 11263, 11241, 11242, 11263,
  11261, 11262, 11263, 11253, 11262, 11263, 11261, 11258, 11263, 11261, 11262, 11263, 11221, 11222, 11231, 11225, 11226, 11263, 11261, 11262, 11263, 11253, 11254, 11263, 11261, 11178, 11263,
  11261, 11262, 11263, 11253, 11262, 11263, 11261, 11258, 11263, 11261, 11262, 11263, 11221, 11262, 11263, 11257, 11258, 11263, 11261, 11262, 11263, 11253, 11254, 11263, 11261, 11242, 11263,
  11261, 11262, 11263, 11253, 11262, 11263, 11261, 11258, 11263, 11261, 11262, 11263, 10581, 10582, 10591, 10585, 10586, 11263, 10621, 10622, 10607, 10597, 10598, 10623, 10601, 10602, 11263,
  11261, 11262, 11263, 10741, 10750, 10751, 10749, 10746, 10751, 10685, 10686, 10687, 10645, 10646, 10655, 10649, 10650, 11263, 10749, 10750, 10671, 10661, 10662, 10751, 10665, 10666, 11007,
  11005, 11006, 11007, 10997, 11006, 11007, 11005, 11002, 11007, 11005, 11006, 11007, 10965, 11006, 11007, 11001, 11002, 11007, 11005, 11006, 11007, 10997, 10998, 11007, 11005, 10986, 11007,
  11005, 11006, 11007, 10997, 11006, 11007, 11005, 11002, 11007, 11005, 11006, 11007, 10837, 10838, 10847, 10841, 10842, 11007, 10877, 10878, 10863, 10853, 10854, 10879, 10857, 10858, 10943,
  10941, 10942, 10943, 10933, 10942, 10943, 10941, 10938, 10943, 10941, 10942, 10943, 10901, 10902, 10911, 10905, 10906, 10927, 10925, 10926, 10927, 10917, 10918, 10923, 10921, 10922,
};
const SafetyT SafetyT8[6561] PROGMEM = {
  65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65365, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65450, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 64853, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65529, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65450, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65365, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65526, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65194, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65365, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65526, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65450, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 62805, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65526, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65494, 65503, 65497, 65498, 65535, 65533, 65534, 65535, 65525, 65526, 65535, 65533, 65450, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65365, 65366, 65375, 65369, 65370, 65535, 65405, 65406, 65391, 65381, 65382, 65407, 65385, 65386, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65494, 65503, 65497, 65498, 65535, 65533, 65534, 65535, 65525, 65526, 65535, 65533, 65194, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65365, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65529, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65450, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 64853, 65534, 65535, 65529, 65530, 65535, 65533, 65534, 65519, 65509, 65510, 65535, 65513, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65469, 65470, 65471, 65429, 65430, 65439, 65433, 65434, 65535, 65533, 65534, 65455, 65445, 65446, 65535, 65449, 65450, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65365, 65534, 65535, 65529, 65530, 65535, 65533, 65534, 65519, 65509, 65510, 65535, 65513, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65529, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 64170, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65365, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65529, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65450, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65529, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 64853, 65534, 65535, 65529, 65530, 65535, 65533, 65534, 65519, 65509, 65510, 65535, 65513, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65469, 65470, 65471, 65429, 65430, 65439, 65433, 65434, 65535, 65533, 65534, 65455, 65445, 65446, 65535, 65449, 65450, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65365, 65534, 65535, 65529, 65530, 65535, 65533, 65534, 65519, 65509, 65510, 65535, 65513, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65529, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65194, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65365, 65534, 65535, 65529, 65530, 65535, 65533, 65534, 65519, 65509, 65510, 65535, 65513, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65529, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65450, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65529, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 54613, 65534, 65535, 65529, 65530, 65535, 65533, 65534, 65519, 65509, 65510, 65535, 65513, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65469, 65470, 65471, 65429, 65430, 65439, 65433, 65434, 65535, 65533, 65534, 65455, 65445, 65446, 65535, 65449, 65450, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65529, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65279, 65269, 65278, 65535, 65277, 65274, 65535, 65277, 65278, 65279, 65109, 65110, 65119, 65113, 65114, 65279, 65149, 65150, 65135, 65125, 65126, 65151, 65129, 65130, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65213, 65214, 65215, 65173, 65174, 65183, 65177, 65178, 65535, 65533, 65534, 65199, 65189, 65190, 65535, 65193, 65194, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65365, 65534, 65535, 65529, 65530, 65535, 65533, 65534, 65519, 65509, 65510, 65535, 65513, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65529, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65450, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 64509, 64510, 64511, 64469, 64510, 65535, 64505, 64506, 65535, 65533, 65534, 64511, 64501, 64502, 65535, 64509, 64490, 65535,
  65533, 65534, 64511, 64501, 64510, 65535, 64509, 64506, 65535, 64509, 64510, 64511, 63829, 63830, 63839, 63833, 63834, 64511, 63869, 63870, 63855, 63845, 63846, 63871, 63849, 63850, 65535,
  64509, 64510, 64511, 63989, 63998, 63999, 63997, 63994, 63999, 63933, 63934, 63935, 63893, 63894, 63903, 63897, 63898, 64511, 63997, 63998, 63919, 63909, 63910, 63999, 63913, 63914, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65529, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 64255, 64245, 64254, 65535, 64253, 64250, 65535, 64253, 64254, 64255, 64085, 64086, 64095, 64089, 64090, 64255, 64125, 64126, 64111, 64101, 64102, 64127, 64105, 64106, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 64189, 64190, 64191, 64149, 64150, 64159, 64153, 64154, 65535, 65533, 65534, 64175, 64165, 64166, 65535, 64169, 64170, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65365, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65526, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65450, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 64853, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65526, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65494, 65503, 65497, 65498, 65535, 65533, 65534, 65535, 65525, 65526, 65535, 65533, 65450, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65526, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65365, 65366, 65375, 65369, 65370, 65535, 65405, 65406, 65391, 65381, 65382, 65407, 65385, 65386, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65494, 65503, 65497, 65498, 65535, 65533, 65534, 65535, 65525, 65526, 65535, 65533, 65194, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65365, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65526, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65494, 65503, 65497, 65498, 65535, 65533, 65534, 65535, 65525, 65526, 65535, 65533, 65450, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65526, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 62805, 62806, 62815, 62809, 62810, 65535, 62845, 62846, 62831, 62821, 62822, 62847, 62825, 62826, 65535,
  65533, 65534, 65535, 62965, 62974, 62975, 62973, 62970, 62975, 62909, 62910, 62911, 62869, 62870, 62879, 62873, 62874, 65535, 62973, 62974, 62895, 62885, 62886, 62975, 62889, 62890, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 63445, 63486, 63487, 63481, 63482, 65535, 63485, 63486, 65535, 63477, 63478, 63487, 63485, 63466, 65535,
  63485, 63486, 63231, 63221, 63230, 63487, 63229, 63226, 63487, 63229, 63230, 63231, 63061, 63062, 63071, 63065, 63066, 63231, 63101, 63102, 63087, 63077, 63078, 63103, 63081, 63082, 65535,
  65533, 65534, 65535, 63477, 63486, 63487, 63485, 63482, 63487, 63165, 63166, 63167, 63125, 63126, 63135, 63129, 63130, 65535, 63485, 63486, 63151, 63141, 63142, 63487, 63145, 63146, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65534, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65365, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65526, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65494, 65503, 65497, 65498, 65535, 65533, 65534, 65535, 65525, 65526, 65535, 65533, 65450, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65526, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 64853, 64854, 64863, 64857, 64858, 65535, 64893, 64894, 64879, 64869, 64870, 64895, 64873, 64874, 65535,
  65533, 65534, 65535, 65013, 65022, 65023, 65021, 65018, 65023, 64957, 64958, 64959, 64917, 64918, 64927, 64921, 64922, 65535, 65021, 65022, 64943, 64933, 64934, 65023, 64937, 64938, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65525, 65526, 65535, 65533, 65514, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65365, 65366, 65375, 65369, 65370, 65535, 65405, 65406, 65391, 65381, 65382, 65407, 65385, 65386, 65535,
  65533, 65534, 65535, 65525, 65534, 65535, 65533, 65530, 65535, 65533, 65534, 65535, 65493, 65494, 65503, 65497, 65498, 65535, 65533, 65534, 65535, 65525, 65526, 65535, 65533, 60074, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32757, 32766, 32767, 32765, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32597, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32757, 32766, 32767, 32765, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32757, 32766, 32767, 32765, 32682, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32757, 32766, 32767, 32765, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32085, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32757, 32758, 32767, 32765, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32726, 32735, 32729, 32730, 32767, 32765, 32766, 32767, 32757, 32758, 32767, 32765, 32682, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32757, 32766, 32767, 32765, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32597, 32766, 32767, 32761, 32762, 32767, 32765, 32766, 32751, 32741, 32742, 32767, 32745, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32766, 32767, 32761, 32762, 32767, 32765, 32766, 32767, 32757, 32766, 32767, 32765, 32426, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32757, 32766, 32767, 32765, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32597, 32766, 32767, 32761, 32762, 32767, 32765, 32766, 32751, 32741, 32742, 32767, 32745, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32766, 32767, 32761, 32762, 32767, 32765, 32766, 32767, 32757, 32766, 32767, 32765, 32682, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32766, 32767, 32761, 32762, 32767, 32765, 32766, 32767, 32757, 32766, 32767, 32765, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 30037, 32766, 32767, 32761, 32762, 32767, 32765, 32766, 32751, 32741, 32742, 32767, 32745, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32701, 32702, 32703, 32661, 32662, 32671, 32665, 32666, 32767, 32765, 32766, 32687, 32677, 32678, 32767, 32681, 32682, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32766, 32767, 32761, 32762, 32767, 32765, 32766, 32767, 32757, 32766, 32767, 32765, 32746, 32767,
  32765, 32766, 32511, 32501, 32510, 32767, 32509, 32506, 32767, 32509, 32510, 32511, 32341, 32342, 32351, 32345, 32346, 32511, 32381, 32382, 32367, 32357, 32358, 32383, 32361, 32362, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32445, 32446, 32447, 32405, 32406, 32415, 32409, 32410, 32767, 32765, 32766, 32431, 32421, 32422, 32767, 32425, 32426, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32757, 32766, 32767, 32765, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32597, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32757, 32758, 32767, 32765, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32726, 32735, 32729, 32730, 32767, 32765, 32766, 32767, 32757, 32758, 32767, 32765, 32682, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32757, 32758, 32767, 32765, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32085, 32086, 32095, 32089, 32090, 32767, 32125, 32126, 32111, 32101, 32102, 32127, 32105, 32106, 32767,
  32765, 32766, 32767, 32245, 32254, 32255, 32253, 32250, 32255, 32189, 32190, 32191, 32149, 32150, 32159, 32153, 32154, 32767, 32253, 32254, 32175, 32165, 32166, 32255, 32169, 32170, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32757, 32758, 32767, 32765, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32597, 32598, 32607, 32601, 32602, 32767, 32637, 32638, 32623, 32613, 32614, 32639, 32617, 32618, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32726, 32735, 32729, 32730, 32767, 32765, 32766, 32767, 32757, 32758, 32767, 32765, 31402, 24575,
  24573, 24574, 24575, 24565, 24574, 24575, 24573, 24570, 24575, 24573, 24574, 24575, 24533, 24574, 24575, 24573, 24570, 24575, 24573, 24574, 24575, 24565, 24574, 24575, 24573, 24554, 24575,
  24573, 24574, 24575, 24565, 24574, 24575, 24573, 24570, 24575, 24573, 24574, 24575, 24405, 24574, 24575, 24573, 24570, 24575, 24573, 24574, 24575, 24565, 24566, 24575, 24573, 24554, 24575,
  24573, 24574, 24575, 24565, 24574, 24575, 24573, 24570, 24575, 24573, 24574, 24575, 24533, 24574, 24575, 24569, 24570, 24575, 24573, 24574, 24575, 24565, 24574, 24575, 24573, 24490, 24575,
  24573, 24574, 24575, 24565, 24574, 24575, 24573, 24570, 24575, 24573, 24574, 24575, 24533, 24574, 24575, 24569, 24570, 24575, 24573, 24574, 24575, 24565, 24574, 24575, 24573, 24554, 24575,
  24573, 24574, 24575, 24565, 24574, 24575, 24573, 24570, 24575, 24573, 24574, 24575, 23893, 24574, 24575, 24569, 24570, 24575, 24573, 24574, 24559, 24549, 24550, 24575, 24553, 24554, 24575,
  24573, 24574, 24575, 24565, 24574, 24575, 24573, 24570, 24575, 24509, 24510, 24511, 24469, 24470, 24479, 24473, 24474, 24575, 24573, 24574, 24495, 24485, 24486, 24575, 24489, 24490, 24575,
  24573, 24574, 24575, 24565, 24574, 24575, 24573, 24570, 24575, 24573, 24574, 24575, 24533, 24574, 24575, 24573, 24570, 24575, 24573, 24574, 24575, 24565, 24566, 24575, 24573, 24554, 24575,
  24573, 24574, 24575, 24565, 24574, 24575, 24573, 24570, 24575, 24573, 24574, 24575, 24405, 24406, 24415, 24409, 24410, 24575, 24445, 24446, 24431, 24421, 24422, 24447, 24425, 24426, 24575,
  24573, 24574, 24575, 24565, 24574, 24575, 24573, 24570, 24575, 24573, 24574, 24575, 24533, 24534, 24543, 24537, 24538, 24575, 24573, 24574, 24575, 24565, 24566, 24575, 24573, 24234, 22527,
  22525, 22526, 22527, 22517, 22526, 22527, 22525, 22522, 22527, 22525, 22526, 22527, 22485, 22526, 22527, 22525, 22522, 22527, 22525, 22526, 22527, 22517, 22526, 22527, 22525, 22506, 22527,
  22525, 22526, 22527, 22517, 22526, 22527, 22525, 22522, 22527, 22525, 22526, 22527, 22357, 22526, 22527, 22521, 22522, 22527, 22525, 22526, 22511, 22501, 22502, 22527, 22505, 22506, 22527,
  22525, 22526, 22527, 22517, 22526, 22527, 22525, 22522, 22527, 22525, 22526, 22527, 22485, 22486, 22495, 22489, 22490, 22527, 22525, 22526, 22527, 22517, 22518, 22527, 22525, 22442, 22015,
  22013, 22014, 22015, 22005, 22014, 22015, 22013, 22010, 22015, 22013, 22014, 22015, 21973, 22014, 22015, 22009, 22010, 22015, 22013, 22014, 22015, 22005, 22006, 22015, 22013, 21994, 21887,
  21885, 21886, 21887, 21877, 21886, 21887, 21885, 21882, 21855, 21853, 21854, 21847, 21845, 21846, 21855, 21849, 21850, 21887, 21885, 21886, 21871, 21861, 21862, 21887, 21865, 21866, 22015,
  22013, 22014, 22015, 22005, 22014, 22015, 22013, 22010, 22015, 21949, 21950, 21951, 21909, 21910, 21919, 21913, 21914, 22015, 22013, 22014, 21935, 21925, 21926, 22015, 21929, 21930, 22527,
  22525, 22526, 22527, 22517, 22526, 22527, 22525, 22522, 22527, 22525, 22526, 22527, 22485, 22526, 22527, 22521, 22522, 22527, 22525, 22526, 22527, 22517, 22518, 22527, 22525, 22506, 22527,
  22525, 22526, 22271, 22261, 22270, 22527, 22269, 22266, 22527, 22269, 22270, 22271, 22101, 22102, 22111, 22105, 22106, 22271, 22141, 22142, 22127, 22117, 22118, 22143, 22121, 22122, 22527,
  22525, 22526, 22527, 22517, 22526, 22527, 22525, 22522, 22527, 22205, 22206, 22207, 22165, 22166, 22175, 22169, 22170, 22527, 22525, 22526, 22191, 22181, 22182, 22527, 22185, 22186, 24575,
  24573, 24574, 24575, 24565, 24574, 24575, 24573, 24570, 24575, 24573, 24574, 24575, 24533, 24574, 24575, 24573, 24570, 24575, 24573, 24574, 24575, 24565, 24574, 24575, 24573, 24554, 24575,
  24573, 24574, 24575, 24565, 24574, 24575, 24573, 24570, 24575, 24573, 24574, 24575, 24405, 24574, 24575, 24569, 24570, 24575, 24573, 24574, 24559, 24549, 24550, 24575, 24553, 24554, 24575,
  24573, 24574, 24575, 24565, 24574, 24575, 24573, 24570, 24575, 24573, 24574, 24575, 24533, 24534, 24543, 24537, 24538, 24575, 24573, 24574, 24575, 24565, 24566, 24575, 24573, 24490, 24575,
  24573, 24574, 24575, 24565, 24574, 24575, 24573, 24570, 24575, 23549, 23550, 23551, 23509, 23550, 24575, 23545, 23546, 24575, 24573, 24574, 23551, 23541, 23542, 24575, 23549, 23530, 24575,
  24573, 24574, 23551, 23541, 23550, 24575, 23549, 23546, 24575, 23549, 23550, 23551, 22869, 22870, 22879, 22873, 22874, 23551, 22909, 22910, 22895, 22885, 22886, 22911, 22889, 22890, 24575,
  23549, 23550, 23551, 23029, 23038, 23039, 23037, 23034, 23039, 22973, 22974, 22975, 22933, 22934, 22943, 22937, 22938, 23551, 23037, 23038, 22959, 22949, 22950, 23039, 22953, 22954, 24575,
  24573, 24574, 24575, 24565, 24574, 24575, 24573, 24570, 24575, 24573, 24574, 24575, 24533, 24574, 24575, 24569, 24570, 24575, 24573, 24574, 24575, 24565, 24566, 24575, 24573, 24554, 24575,
  24573, 24574, 23295, 23285, 23294, 24575, 23293, 23290, 24575, 23293, 23294, 23295, 23125, 23126, 23135, 23129, 23130, 23295, 23165, 23166, 23151, 23141, 23142, 23167, 23145, 23146, 24575,
  24573, 24574, 24575, 24565, 24574, 24575, 24573, 24570, 24575, 23229, 23230, 23231, 23189, 23190, 23199, 23193, 23194, 24575, 24573, 24574, 23215, 23205, 23206, 24575, 23209, 23210, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32757, 32766, 32767, 32765, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32597, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32757, 32758, 32767, 32765, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32766, 32767, 32761, 32762, 32767, 32765, 32766, 32767, 32757, 32766, 32767, 32765, 32682, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32766, 32767, 32761, 32762, 32767, 32765, 32766, 32767, 32757, 32766, 32767, 32765, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32085, 32766, 32767, 32761, 32762, 32767, 32765, 32766, 32751, 32741, 32742, 32767, 32745, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32701, 32702, 32703, 32661, 32662, 32671, 32665, 32666, 32767, 32765, 32766, 32687, 32677, 32678, 32767, 32681, 32682, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32757, 32758, 32767, 32765, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32597, 32598, 32607, 32601, 32602, 32767, 32637, 32638, 32623, 32613, 32614, 32639, 32617, 32618, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32726, 32735, 32729, 32730, 32767, 32765, 32766, 32767, 32757, 32758, 32767, 32765, 32426, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32757, 32766, 32767, 32765, 32746, 32767,
  32765, 32766, 28671, 28661, 28670, 32767, 28669, 28666, 32767, 28669, 28670, 28671, 28501, 28670, 32767, 28665, 28666, 32767, 32765, 32766, 28655, 28645, 28646, 32767, 28649, 28650, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 28669, 28670, 28671, 28629, 28630, 28639, 28633, 28634, 32767, 32765, 32766, 28671, 28661, 28662, 32767, 28669, 28586, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 28669, 28670, 28671, 28629, 28670, 32767, 28665, 28666, 32767, 32765, 32766, 28671, 28661, 28662, 32767, 28669, 28650, 32767,
  32765, 32766, 28671, 28661, 28670, 32767, 28669, 28666, 32767, 28669, 28670, 28671, 25941, 25942, 25951, 25945, 25946, 28671, 25981, 25982, 25967, 25957, 25958, 25983, 25961, 25962, 32767,
  28669, 28670, 28671, 26101, 26110, 26111, 26109, 26106, 26111, 26045, 26046, 26047, 26005, 26006, 26015, 26009, 26010, 28671, 26109, 26110, 26031, 26021, 26022, 26111, 26025, 26026, 32767,
  32765, 32766, 28671, 28661, 28670, 32767, 28669, 28666, 32767, 28669, 28670, 28671, 26581, 26622, 26623, 26617, 26618, 28671, 26621, 26622, 28671, 26613, 26614, 26623, 26621, 26602, 28671,
  26621, 26622, 26367, 26357, 26366, 26623, 26365, 26362, 26623, 26365, 26366, 26367, 26197, 26198, 26207, 26201, 26202, 26367, 26237, 26238, 26223, 26213, 26214, 26239, 26217, 26218, 32767,
  28669, 28670, 28671, 26613, 26622, 26623, 26621, 26618, 26623, 26301, 26302, 26303, 26261, 26262, 26271, 26265, 26266, 28671, 26621, 26622, 26287, 26277, 26278, 26623, 26281, 26282, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32757, 32766, 32767, 32765, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32597, 32766, 32767, 32761, 32762, 32767, 32765, 32766, 32751, 32741, 32742, 32767, 32745, 32746, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32726, 32735, 32729, 32730, 32767, 32765, 32766, 32767, 32757, 32758, 32767, 32765, 32682, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 27645, 27646, 27647, 27605, 27646, 32767, 27641, 27642, 32767, 32765, 32766, 27647, 27637, 27638, 32767, 27645, 27626, 32767,
  32765, 32766, 27647, 27637, 27646, 32767, 27645, 27642, 32767, 27645, 27646, 27647, 26965, 26966, 26975, 26969, 26970, 27647, 27005, 27006, 26991, 26981, 26982, 27007, 26985, 26986, 32767,
  27645, 27646, 27647, 27125, 27134, 27135, 27133, 27130, 27135, 27069, 27070, 27071, 27029, 27030, 27039, 27033, 27034, 27647, 27133, 27134, 27055, 27045, 27046, 27135, 27049, 27050, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 32765, 32766, 32767, 32725, 32766, 32767, 32761, 32762, 32767, 32765, 32766, 32767, 32757, 32758, 32767, 32765, 32746, 32767,
  32765, 32766, 27391, 27381, 27390, 32767, 27389, 27386, 32767, 27389, 27390, 27391, 27221, 27222, 27231, 27225, 27226, 27391, 27261, 27262, 27247, 27237, 27238, 27263, 27241, 27242, 32767,
  32765, 32766, 32767, 32757, 32766, 32767, 32765, 32762, 32767, 27325, 27326, 27327, 27285, 27286, 27295, 27289, 27290, 32767, 32765, 32766, 27311, 27301, 27302, 32767, 27305, 27306, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49141, 49150, 49151, 49149, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 48981, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49141, 49150, 49151, 49149, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49141, 49150, 49151, 49149, 49066, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49141, 49150, 49151, 49149, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 48469, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49141, 49142, 49151, 49149, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49110, 49119, 49113, 49114, 49151, 49149, 49150, 49151, 49141, 49142, 49151, 49149, 49066, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49141, 49150, 49151, 49149, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 48981, 49150, 49151, 49145, 49146, 49151, 49149, 49150, 49135, 49125, 49126, 49151, 49129, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49150, 49151, 49145, 49146, 49151, 49149, 49150, 49151, 49141, 49150, 49151, 49149, 48810, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49141, 49150, 49151, 49149, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 48981, 49150, 49151, 49145, 49146, 49151, 49149, 49150, 49135, 49125, 49126, 49151, 49129, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49150, 49151, 49145, 49146, 49151, 49149, 49150, 49151, 49141, 49150, 49151, 49149, 49066, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49150, 49151, 49145, 49146, 49151, 49149, 49150, 49151, 49141, 49150, 49151, 49149, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 46421, 49150, 49151, 49145, 49146, 49151, 49149, 49150, 49135, 49125, 49126, 49151, 49129, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49085, 49086, 49087, 49045, 49046, 49055, 49049, 49050, 49151, 49149, 49150, 49071, 49061, 49062, 49151, 49065, 49066, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49150, 49151, 49145, 49146, 49151, 49149, 49150, 49151, 49141, 49150, 49151, 49149, 49130, 49151,
  49149, 49150, 48895, 48885, 48894, 49151, 48893, 48890, 49151, 48893, 48894, 48895, 48725, 48726, 48735, 48729, 48730, 48895, 48765, 48766, 48751, 48741, 48742, 48767, 48745, 48746, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 48829, 48830, 48831, 48789, 48790, 48799, 48793, 48794, 49151, 49149, 49150, 48815, 48805, 48806, 49151, 48809, 48810, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49141, 49150, 49151, 49149, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 48981, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49141, 49142, 49151, 49149, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49110, 49119, 49113, 49114, 49151, 49149, 49150, 49151, 49141, 49142, 49151, 49149, 49066, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49141, 49142, 49151, 49149, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 48469, 48470, 48479, 48473, 48474, 49151, 48509, 48510, 48495, 48485, 48486, 48511, 48489, 48490, 49151,
  49149, 49150, 49151, 48629, 48638, 48639, 48637, 48634, 48639, 48573, 48574, 48575, 48533, 48534, 48543, 48537, 48538, 49151, 48637, 48638, 48559, 48549, 48550, 48639, 48553, 48554, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49141, 49142, 49151, 49149, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 48981, 48982, 48991, 48985, 48986, 49151, 49021, 49022, 49007, 48997, 48998, 49023, 49001, 49002, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49110, 49119, 49113, 49114, 49151, 49149, 49150, 49151, 49141, 49142, 49151, 49149, 47786, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49141, 49150, 49151, 49149, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 48981, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49141, 49142, 49151, 49149, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49150, 49151, 49145, 49146, 49151, 49149, 49150, 49151, 49141, 49150, 49151, 49149, 49066, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49150, 49151, 49145, 49146, 49151, 49149, 49150, 49151, 49141, 49150, 49151, 49149, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 48469, 49150, 49151, 49145, 49146, 49151, 49149, 49150, 49135, 49125, 49126, 49151, 49129, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49085, 49086, 49087, 49045, 49046, 49055, 49049, 49050, 49151, 49149, 49150, 49071, 49061, 49062, 49151, 49065, 49066, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49141, 49142, 49151, 49149, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 48981, 48982, 48991, 48985, 48986, 49151, 49021, 49022, 49007, 48997, 48998, 49023, 49001, 49002, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49110, 49119, 49113, 49114, 49151, 49149, 49150, 49151, 49141, 49142, 49151, 49149, 48810, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49141, 49150, 49151, 49149, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 48981, 49150, 49151, 49145, 49146, 49151, 49149, 49150, 49135, 49125, 49126, 49151, 49129, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49110, 49119, 49113, 49114, 49151, 49149, 49150, 49151, 49141, 49142, 49151, 49149, 49066, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49150, 49151, 49145, 49146, 49151, 49149, 49150, 49151, 49141, 49142, 49151, 49149, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 38229, 38230, 38239, 38233, 38234, 49151, 38269, 38270, 38255, 38245, 38246, 38271, 38249, 38250, 49151,
  49149, 49150, 49151, 38389, 38398, 38399, 38397, 38394, 38399, 38333, 38334, 38335, 38293, 38294, 38303, 38297, 38298, 49151, 38397, 38398, 38319, 38309, 38310, 38399, 38313, 38314, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 38869, 38910, 38911, 38905, 38906, 49151, 38909, 38910, 49151, 38901, 38902, 38911, 38909, 38890, 49151,
  38909, 38910, 38655, 38645, 38654, 38911, 38653, 38650, 38911, 38653, 38654, 38655, 38485, 38486, 38495, 38489, 38490, 38655, 38525, 38526, 38511, 38501, 38502, 38527, 38505, 38506, 49151,
  49149, 49150, 49151, 38901, 38910, 38911, 38909, 38906, 38911, 38589, 38590, 38591, 38549, 38550, 38559, 38553, 38554, 49151, 38909, 38910, 38575, 38565, 38566, 38911, 38569, 38570, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49109, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 49141, 49150, 49151, 49149, 49130, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 40789, 40958, 40959, 40953, 40954, 49151, 40957, 40958, 40943, 40933, 40934, 40959, 40937, 40938, 49151,
  49149, 49150, 49151, 40949, 40958, 40959, 40957, 40954, 49151, 49149, 49150, 49151, 40917, 40918, 40927, 40921, 40922, 49151, 40957, 40958, 49151, 40949, 40950, 40959, 40957, 40874, 49151,
  49149, 49150, 49151, 40949, 40958, 40959, 40957, 40954, 40959, 39933, 39934, 39935, 39893, 39934, 40959, 39929, 39930, 49151, 40957, 40958, 39935, 39925, 39926, 40959, 39933, 39914, 49151,
  40957, 40958, 39935, 39925, 39934, 40959, 39933, 39930, 40959, 39933, 39934, 39935, 39253, 39254, 39263, 39257, 39258, 39935, 39293, 39294, 39279, 39269, 39270, 39295, 39273, 39274, 40959,
  39933, 39934, 39935, 39413, 39422, 39423, 39421, 39418, 39423, 39357, 39358, 39359, 39317, 39318, 39327, 39321, 39322, 39935, 39421, 39422, 39343, 39333, 39334, 39423, 39337, 39338, 49151,
  49149, 49150, 49151, 49141, 49150, 49151, 49149, 49146, 49151, 49149, 49150, 49151, 40917, 40958, 40959, 40953, 40954, 49151, 40957, 40958, 49151, 40949, 40950, 40959, 40957, 40938, 49151,
  40957, 40958, 39679, 39669, 39678, 40959, 39677, 39674, 40959, 39677, 39678, 39679, 39509, 39510, 39519, 39513, 39514, 39679, 39549, 39550, 39535, 39525, 39526, 39551, 39529, 39530, 49151,
  49149, 49150, 49151, 40949, 40958, 40959, 40957, 40954, 40959, 39613, 39614, 39615, 39573, 39574, 39583, 39577, 39578, 49151, 40957, 40958, 39599, 39589, 39590, 40959, 39593, 39594, 45055,
  45053, 45054, 45055, 45045, 45054, 45055, 45053, 45050, 45055, 45053, 45054, 45055, 45013, 45054, 45055, 45053, 45050, 45055, 45053, 45054, 45055, 45045, 45054, 45055, 45053, 45034, 45055,
  45053, 45054, 45055, 45045, 45054, 45055, 45053, 45050, 45055, 45053, 45054, 45055, 44885, 45054, 45055, 45053, 45050, 45055, 45053, 45054, 45055, 45045, 45046, 45055, 45053, 45034, 45055,
  45053, 45054, 45055, 45045, 45054, 45055, 45053, 45050, 45055, 45053, 45054, 45055, 45013, 45054, 45055, 45049, 45050, 45055, 45053, 45054, 45055, 45045, 45054, 45055, 45053, 44970, 45055,
  45053, 45054, 45055, 45045, 45054, 45055, 45053, 45050, 45055, 45053, 45054, 45055, 45013, 45054, 45055, 45049, 45050, 45055, 45053, 45054, 45055, 45045, 45054, 45055, 45053, 45034, 45055,
  45053, 45054, 45055, 45045, 45054, 45055, 45053, 45050, 45055, 45053, 45054, 45055, 44373, 45054, 45055, 45049, 45050, 45055, 45053, 45054, 45039, 45029, 45030, 45055, 45033, 45034, 45055,
  45053, 45054, 45055, 45045, 45054, 45055, 45053, 45050, 45055, 44989, 44990, 44991, 44949, 44950, 44959, 44953, 44954, 45055, 45053, 45054, 44975, 44965, 44966, 45055, 44969, 44970, 45055,
  45053, 45054, 45055, 45045, 45054, 45055, 45053, 45050, 45055, 45053, 45054, 45055, 45013, 45054, 45055, 45053, 45050, 45055, 45053, 45054, 45055, 45045, 45046, 45055, 45053, 45034, 45055,
  45053, 45054, 45055, 45045, 45054, 45055, 45053, 45050, 45055, 45053, 45054, 45055, 44885, 44886, 44895, 44889, 44890, 45055, 44925, 44926, 44911, 44901, 44902, 44927, 44905, 44906, 45055,
  45053, 45054, 45055, 45045, 45054, 45055, 45053, 45050, 45055, 45053, 45054, 45055, 45013, 45014, 45023, 45017, 45018, 45055, 45053, 45054, 45055, 45045, 45046, 45055, 45053, 44714, 45055,
  45053, 45054, 45055, 45045, 45054, 45055, 45053, 45050, 45055, 45053, 45054, 45055, 45013, 45054, 45055, 45053, 45050, 45055, 45053, 45054, 45055, 45045, 45054, 45055, 45053, 45034, 45055,
  45053, 45054, 45055, 45045, 45054, 45055, 45053, 45050, 45055, 45053, 45054, 45055, 44885, 45054, 45055, 45049, 45050, 45055, 45053, 45054, 45039, 45029, 45030, 45055, 45033, 45034, 45055,
  45053, 45054, 45055, 45045, 45054, 45055, 45053, 45050, 45055, 45053, 45054, 45055, 45013, 45014, 45023, 45017, 45018, 45055, 45053, 45054, 45055, 45045, 45046, 45055, 45053, 44970, 45055,
  45053, 45054, 45055, 45045, 45054, 45055, 45053, 45050, 45055, 45053, 45054, 45055, 45013, 45054, 45055, 45049, 45050, 45055, 45053, 45054, 45055, 45045, 45046, 45055, 45053, 45034, 45055,
  45053, 45054, 45055, 45045, 45054, 45055, 45053, 45050, 45055, 45053, 45054, 45055, 42325, 42326, 42335, 42329, 42330, 45055, 42365, 42366, 42351, 42341, 42342, 42367, 42345, 42346, 45055,
  45053, 45054, 45055, 42485, 42494, 42495, 42493, 42490, 42495, 42429, 42430, 42431, 42389, 42390, 42399, 42393, 42394, 45055, 42493, 42494, 42415, 42405, 42406, 42495, 42409, 42410, 45055,
  45053, 45054, 45055, 45045, 45054, 45055, 45053, 45050, 45055, 45053, 45054, 45055, 42965, 43006, 43007, 43001, 43002, 45055, 43005, 43006, 45055, 42997, 42998, 43007, 43005, 42986, 45055,
  43005, 43006, 42751, 42741, 42750, 43007, 42749, 42746, 43007, 42749, 42750, 42751, 42581, 42582, 42591, 42585, 42586, 42751, 42621, 42622, 42607, 42597, 42598, 42623, 42601, 42602, 45055,
  45053, 45054, 45055, 42997, 43006, 43007, 43005, 43002, 43007, 42685, 42686, 42687, 42645, 42646, 42655, 42649, 42650, 45055, 43005, 43006, 42671, 42661, 42662, 43007, 42665, 42666, 44031,
  44029, 44030, 44031, 44021, 44030, 44031, 44029, 44026, 44031, 44029, 44030, 44031, 43989, 44030, 44031, 44029, 44026, 44031, 44029, 44030, 44031, 44021, 44030, 44031, 44029, 44010, 44031,
  44029, 44030, 44031, 44021, 44030, 44031, 44029, 44026, 44031, 44029, 44030, 44031, 43861, 44030, 44031, 44025, 44026, 44031, 44029, 44030, 44015, 44005, 44006, 44031, 44009, 44010, 44031,
  44029, 44030, 44031, 44021, 44030, 44031, 44029, 44026, 44031, 44029, 44030, 44031, 43989, 43990, 43999, 43993, 43994, 44031, 44029, 44030, 44031, 44021, 44022, 44031, 44029, 43946, 44031,
  44029, 44030, 44031, 44021, 44030, 44031, 44029, 44026, 44031, 44029, 44030, 44031, 43989, 44030, 44031, 44025, 44026, 44031, 44029, 44030, 44031, 44021, 44022, 44031, 44029, 44010, 44031,
  44029, 44030, 44031, 44021, 44030, 44031, 44029, 44026, 44031, 44029, 44030, 44031, 43349, 43350, 43359, 43353, 43354, 44031, 43389, 43390, 43375, 43365, 43366, 43391, 43369, 43370, 44031,
  44029, 44030, 44031, 43509, 43518, 43519, 43517, 43514, 43519, 43453, 43454, 43455, 43413, 43414, 43423, 43417, 43418, 44031, 43517, 43518, 43439, 43429, 43430, 43519, 43433, 43434, 43775,
  43773, 43774, 43775, 43765, 43774, 43775, 43773, 43770, 43775, 43773, 43774, 43775, 43733, 43774, 43775, 43769, 43770, 43775, 43773, 43774, 43775, 43765, 43766, 43775, 43773, 43754, 43775,
  43773, 43774, 43775, 43765, 43774, 43775, 43773, 43770, 43775, 43773, 43774, 43775, 43605, 43606, 43615, 43609, 43610, 43775, 43645, 43646, 43631, 43621, 43622, 43647, 43625, 43626, 43711,
  43709, 43710, 43711, 43701, 43710, 43711, 43709, 43706, 43711, 43709, 43710, 43711, 43669, 43670, 43679, 43673, 43674, 43695, 43693, 43694, 43695, 43685, 43686, 43691, 43689, 43690,
};

#define far_ptr_t unsigned long
const SafetyT * safety_add[8] =
{
  SafetyT1,
  SafetyT2,
  SafetyT3,
  SafetyT4,
  SafetyT5,
  SafetyT6,
  SafetyT7,
  SafetyT8
};

SafetyT safety(int a, int i)
{
  return pgm_read_word(&(safety_add[a])[i]) ;
  //return pgm_read_word_far_index(safety_add[a], i);
}
//paired so direction and len are the same except the last pair where only len is the same





/*x,0,x,x,x,x,x,x,x,2,4,6*/
const int shifts[] = { -1,0,-1,-1,-1,-1,-1,-1,-1,2,4,6 };

Square undo_buffer_array[64 * 10];
Square *undo_buffer = &undo_buffer_array[0];

typedef int32_t ValuationArray[100];
ValuationArray aValuationArray;


inline Square other_color(Square c) { return (Black + White) ^ c; }

//note white is positive, black negative
//add number of pieces to this
int8_t Values[256];
const int8_t values_by_color[] = { -64,-32,-16,-8,0,8,16,32,64 };
void initValues()
{
  for (int i = 0;i < 256;++i) {
    int count_black = 0;
    int count_white = 0;
    int count_ambig = 0;
    for (int p = 0;p < 4;++p) {
      int at = (i >> (p + p)) & 3;
      switch (at) {
      case 1:
        if (count_black) {
          --count_black;
          ++count_ambig;
        }
        else ++count_white;
        break;
      case 2:
        if (count_white) {
          --count_white;
          ++count_ambig;
        }
        else ++count_black;
        break;
      case 3:
        ++count_ambig;
      }

    }
    Values[i] = values_by_color[count_white - count_black + 4] >> count_ambig;
  }
}
template <int DIR>
class Move {
public:
  static bool check(int pos, Square color, Square other, Square *r)
  {
    if (r[DIR] == other) {
      if (r[2 * DIR] == other) {
        if (r[3 * DIR] == other) {
          if (r[4 * DIR] == other) {
            if (r[5 * DIR] == other) {
              if (r[6 * DIR] == other) {
                if (r[7 * DIR] == color) {
                  return true;
                }
              }
              else if (r[6 * DIR] == color) {
                return true;
              }

            }
            else if (r[5 * DIR] == color) {
              return true;
            }
          }
          else if (r[4 * DIR] == color) {
            return true;
          }
        }
        else if (r[3 * DIR] == color) {
          return true;
        }
      }
      else if (r[2 * DIR] == color) {
        return true;
      }
    }
    return false;
  }
  static int move(Square *&undo, int pos, Square color, Square other, Square *r)
  {
    blink();
//  Serial.print(F("move "));Serial.print(pos);Serial.print(F(" "));;Serial.println(color);
  //delay(2000);
    if (r[DIR] == other) {
      if (r[2 * DIR] == other) {
        if (r[3 * DIR] == other) {
          if (r[4 * DIR] == other) {
            if (r[5 * DIR] == other) {
              if (r[6 * DIR] == other) {
                if (r[7 * DIR] == color) {
                  r[6 * DIR] = r[5 * DIR] = r[4 * DIR] = r[3 * DIR] = r[2 * DIR] = r[DIR] = color;
                  undo[5] = 6 * DIR + pos;
                  undo[4] = 5 * DIR + pos;
                  undo[3] = 4 * DIR + pos;
                  undo[2] = 3 * DIR + pos;
                  undo[1] = 2 * DIR + pos;
                  undo[0] = DIR + pos;
                  undo += 6;
                  return 1;
                }
              }
              else if (r[6 * DIR] == color) {
                r[5 * DIR] = r[4 * DIR] = r[3 * DIR] = r[2 * DIR] = r[DIR] = color;
                undo[4] = 5 * DIR + pos;
                undo[3] = 4 * DIR + pos;
                undo[2] = 3 * DIR + pos;
                undo[1] = 2 * DIR + pos;
                undo[0] = DIR + pos;
                undo += 5;
                return 1;
              }

            }
            else if (r[5 * DIR] == color) {
              r[4 * DIR] = r[3 * DIR] = r[2 * DIR] = r[DIR] = color;
              undo[3] = 4 * DIR + pos;
              undo[2] = 3 * DIR + pos;
              undo[1] = 2 * DIR + pos;
              undo[0] = DIR + pos;
              undo += 4;
              return 1;
            }
          }
          else if (r[4 * DIR] == color) {
            r[3 * DIR] = r[2 * DIR] = r[DIR] = color;
            undo[2] = 3 * DIR + pos;
            undo[1] = 2 * DIR + pos;
            undo[0] = DIR + pos;
            undo += 3;
            return 1;
          }
        }
        else if (r[3 * DIR] == color) {
          r[2 * DIR] = r[DIR] = color;
          undo[1] = 2 * DIR + pos;
          undo[0] = DIR + pos;
          undo += 2;
          return 1;
        }
      }
      else if (r[2 * DIR] == color) {

        r[DIR] = color;
        undo[0] = DIR + pos;
        undo += 1;
        return 1;
      }
    }
    return 0;
  }
};
bool fast_move_check(int pos, Square color, Square *board)
{
  if (board[pos] != Empty) return false;
  const Square other = other_color(color);
  Square *r = &board[pos];
  return Move<1>::check(pos, color, other, r) ||
    Move<-1>::check(pos, color, other, r) ||
    Move<10>::check(pos, color, other, r) ||
    Move<-10>::check(pos, color, other, r) ||
    Move<11>::check(pos, color, other, r) ||
    Move<-11>::check(pos, color, other, r) ||
    Move<9>::check(pos, color, other, r) ||
    Move<-9>::check(pos, color, other, r);
}

bool fast_move(Square *&undo, int pos, Square color, Square *board)
{
  if (board[pos] != Empty) return false;
  const Square other = other_color(color);
  Square *r = &board[pos];
  Square *u = undo;
  if (0 != (Move<1>::move(u, pos, color, other, r) |
    Move<-1>::move(u, pos, color, other, r) |
    Move<10>::move(u, pos, color, other, r) |
    Move<-10>::move(u, pos, color, other, r) |
    Move<11>::move(u, pos, color, other, r) |
    Move<-11>::move(u, pos, color, other, r) |
    Move<9>::move(u, pos, color, other, r) |
    Move<-9>::move(u, pos, color, other, r)))
  {
    Square t = u-undo;
    *u++ = t;
    *u++ = pos;
//    Serial.print(F("Record undo at: "));Serial.print(pos); Serial.print(F(" len: "));Serial.println(u-undo);
    board[pos] = color;
    undo = u;
    return true;
  }
  return false;

}
bool move(Square *&undo, int pos, Square color, Square *board, const int *directions, bool check = false)
{
  if (board[pos] != Empty) return false;
  Square other = other_color(color);
  Square *u = undo;
  Square *r = &board[pos];
  for (int d = 0;directions[d];++d) {
    int dir = directions[d];
    if (r[dir] == other) {
      Square * o = &r[dir];
      while (o[dir] == other) o += dir;
      if (o[dir] == color) {
        if (check) return true;
        do {
          *u++ = o - board;
          *o = color;
          o -= dir;
        } while (o != r);
      }
    }
  }
  if (u != undo) {
    Square t =  u - undo;
  
    *u++ = t;
    *u++ = pos;
    board[pos] = color;
    undo = u;
    return true;
  }
  return false;
}
void dump_undos()
{
 
  return;
  Square *u = undo_buffer;
  Serial.println(F("***Undo dump"));
  while (u!=&undo_buffer_array[0] && u!=&undo_buffer_array[1] && u!=u!=&undo_buffer_array[-1] ){
    Serial.print(F("undo at "));
    Serial.print(*(--u));
    int num = *--u;
    Serial.print(F(" "));
    Serial.print(num);
    Serial.println(F(" flips"));
    while (num-- > 0) {
      Serial.print(F(" flip"));
      Serial.print(*u);
      --u;
    }
    Serial.println(F(""));
  }
  Serial.println(F("***End undo dump"));
}
void undo(Square *&undo, Square *board)
{
  if (undo_buffer == &undo_buffer_array[0]) {
//    Serial.println(F("undo nothing"));
    return;
  }
  if (undo != undo_buffer){
//    Serial.println(F("*********************************oh shit*******************"));
//    abort();
  }
  Square *u = undo;
//  Serial.print(F("undo at "));
//  Serial.println(*(u-1));
  board[*--u] = Empty;
  int num = *--u;
//  Serial.print(num);
//  Serial.println(F(" flips"));
  while (num-- > 0) {
//    Serial.print(F(" flip"));
//    Serial.println(*u);
  
    board[*--u] ^= (White + Black);
  }
  undo = u;
}

static int8_t blacklru[1][64] = { {
    11,18,81,88,
    13,16,38,68,86,83,61,31,
    14,15,48,58,84,85,41,51,
    33,34,35,36,43,44,45,46,53,54,55,56,63,64,65,66,
    23,24,25,26,37,47,57,67,73,74,75,76,32,42,52,62,
    12,21,17,28,78,87,82,71,
    22,27,77,72
  } };

static int8_t whitelru[1][64] = { {

    11,18,81,88,
    13,16,38,68,86,83,61,31,
    14,15,48,58,84,85,41,51,
    33,34,35,36,43,44,45,46,53,54,55,56,63,64,65,66,
    23,24,25,26,37,47,57,67,73,74,75,76,32,42,52,62,
    12,21,17,28,78,87,82,71,
    22,27,77,72
  } };



static int8_t endgame_blacklru[1][64] = { {
    11,18,81,88,
    13,16,38,68,86,83,61,31,
    14,15,48,58,84,85,41,51,
    33,34,35,36,43,44,45,46,53,54,55,56,63,64,65,66,
    23,24,25,26,37,47,57,67,73,74,75,76,32,42,52,62,
    12,21,17,28,78,87,82,71,
    22,27,77,72
  } };

static int8_t endgame_whitelru[1][64] = { {

    11,18,81,88,
    13,16,38,68,86,83,61,31,
    14,15,48,58,84,85,41,51,
    33,34,35,36,43,44,45,46,53,54,55,56,63,64,65,66,
    23,24,25,26,37,47,57,67,73,74,75,76,32,42,52,62,
    12,21,17,28,78,87,82,71,
    22,27,77,72
  } };

class Board {
public:
  Board() {
    for (int i = 0;i < 100;++i) board[i] = Empty;
    for (int i = 0;i < 9;++i) {
      board[90 - i * 10] = board[99 - i] = board[9 + i * 10] = board[i] = Out;
    }
    board[44] = board[55] = White;
    board[45] = board[54] = Black;
  }
  bool move(Square *&undo, int pos, Square color, bool check = false) {
    if (!check) return fast_move(undo, pos, color, board);
    return fast_move_check(pos, color, board);
  }
  void undo(Square *&undo, Square *board)
  {
    ::undo(undo, board);
  }
  BoardArray board;
  void print()
  {
    int b = 0, w = 0;
    const char *p = ".*Ox#";
    Serial.println(F("     1 2 3 4 5 6 7 8"));
    for (int i = 0;i < 100;++i) {
      if (i % 10 == 0) {
        if (i == 0 || i == 90) Serial.print(F("   "));
        else { Serial.print(F(" "));Serial.print(i / 10);Serial.print(F(" ")); }
      }
      Serial.write(p[board[i]]);Serial.write(' ');
      if (board[i] == Black) ++b;
      else if (board[i] == White) ++w;
      if (i % 10 == 9) {
        Serial.write('\n');
        }
      }

    Serial.print(b); Serial.print(F(" black pieces, ")); Serial.print(w); Serial.println(F(" white pieces"));
  }


  bool collect_primary_alphabeta(int32_t collect, int32_t collect_max, int32_t * move_collection, int depth, Square color, Square root_color, bool use_move_count);

  int32_t alphabeta(int &move_at, int depth, int32_t alpha, int32_t beta, Square color, Square root_color, bool use_move_count);
  int32_t movelist_alphabeta(int32_t* move_collection, int &move_at, int depth, Square color, Square root_color, bool use_move_count);
  int32_t endgame_alphabeta(int &move_at, int depth, int32_t alpha, int32_t beta, Square color, Square root_color, bool passed = false);


#ifdef NO_OPTIMIZATION
  bool next_move(int &move_number, int &move_at, Square color, int)
  {
    if (move_number > 63) return false;
    int at = move_at;
    do {
      if (move_number == 64) return false;
      at = (move_number & 7) + 11 + (move_number >> 3) * 10;
      ++move_number;
    } while (!move(undo_buffer, at, color));
 //   print();
    move_at = at;
    return true;
  }
  void killer(int move_number, Square color, int depth) {}
#else
  void killer2(int move_number, Square color, int depth)
  {
    if (move_number == 0) return;
    int8_t *lru;
    if (color == White)lru = endgame_whitelru[0];
    else lru = endgame_blacklru[0];
    int at = lru[move_number];
    for (int i = move_number - 1;i >= 0;--i) lru[i + 1] = lru[i];
    lru[0] = at;
  }
  void killer(int move_number, Square color, int depth)
  {
    if (move_number <= 1) return;
    int8_t *lru;
    if (color == White)lru = whitelru[0];
    else lru = blacklru[0];
    int at = lru[move_number];
    int a0 = lru[0];
    int a1 = lru[move_number >> 1];

    lru[0] = at;
    lru[move_number >> 1] = a0;
    lru[move_number] = a1;
  }
  void endgame_killer(int move_number, Square color, int depth)
  {
    static int32_t countdown = 100000;
    if (countdown) {
      --countdown;
      return killer2(move_number, color, depth);
    }
    if (move_number <= 1) return;
    int8_t *lru;
    if (color == White)lru = endgame_whitelru[0];
    else lru = endgame_blacklru[0];
    int at = lru[move_number];
    int a0 = lru[0];
    int a1 = lru[move_number >> 1];

    lru[0] = at;
    lru[move_number >> 1] = a0;
    lru[move_number] = a1;
  }


  bool next_move(int &move_number, int &move_at, Square color, int depth)
  {
    if (move_number > 63) return false;
    int at;
    do {
      if (move_number == 64) return false;
      //at = (move_number >> 3) * 10 + (move_number & 7) + 11;
      //++move_number;
      if (color == White)at = whitelru[0][move_number++];
      else at = blacklru[0][move_number++];
    } while (!move(undo_buffer, at, color));
    move_at = at;
    return true;
  }
  bool endgame_next_move(int &move_number, int &move_at, Square color, int depth)
  {
    if (move_number > 63) return false;
    int at;
    do {
      if (move_number == 64) return false;
      //at = (move_number >> 3) * 10 + (move_number & 7) + 11;
      //++move_number;
      if (color == White)at = endgame_whitelru[0][move_number++];
      else at = endgame_blacklru[0][move_number++];
    } while (!move(undo_buffer, at, color));
    move_at = at;
    return true;
  }
#endif
  bool next_move_not_in(int32_t *saved_moves, int &move_number, int &move_at, Square color, int depth)
  {
    while (next_move(move_number, move_at, color, depth)) {
      for (int i = 1;i < *saved_moves;++i) {
        if (saved_moves[i] == move_at) goto again;
      }
      return true;
    again:;
      undo(undo_buffer, board);
    }
    return false;
  }
  int find_move(int depth, Square color, bool use_move_count);
  bool can_move(Square color)
  {
    blink();
//    Serial.print(F("Can move "));
//    Serial.println(color);
//    delay(300);

    for (int p = 11;p <= 88;++p) if (move(undo_buffer, p, color, true)) return true;
//    Serial.println(F("no moves"));
//    delay(300);
    return false;
  }

  bool end_of_game()
  {
    return !can_move(White) && !can_move(Black);
  }
  int forced_move(int & move_at, Square color)
  {
    int moves = 0;
    move_at = 0;
    for (int p = 11;p <= 88;++p) {
      if (move(undo_buffer, p, color, true)) {
        move_at = p;
        if (++moves == 2) return false;
      }
    }
    return true;
  }
  int count_moves(int & move_at, Square color)
  {
    int moves = 0;
    move_at = 0;
    for (int p = 11;p <= 88;++p) {
      if (move(undo_buffer, p, color, true)) {
        move_at = p;
        ++moves;
      }
    }
    return moves;
  }

  void input(Square color, const char *command = NULL)
  {
    do {
      char buf[20];
      print();
      if (color == White) Serial.print(F("White's"));
      else Serial.print(F("Black's"));
      Serial.print(F(" move (p for pass, u undo, a[n] auto, b[n] alt auto):"));
      if (command) strcpy(buf, command);
      else { gets(buf, sizeof(buf) - 1); Serial.println(F("")); }
      int i = -1;
      i=atoi(buf);
      if (buf[0] == 'p') return;

      if (buf[0] == 'a') {
        int m = find_move(buf[1] - '0', color, false);
        Serial.print(F("move at "));Serial.println(m);
        if (!move(undo_buffer, m, color)) {
          Serial.println(F("pass"));
        }
        return;

      }
      if (buf[0] == 'b') {
        int m = find_move(buf[1] - '0', color, true);
        Serial.print(F("move at "));Serial.println( m);
        if (!move(undo_buffer, m, color)) {
          Serial.println(F("pass."));
        }
        return;

      }

      if (buf[0] == 'u') {
        undo(undo_buffer, board);

        return;
      }
      if (i < 11 || i>99 || !move(undo_buffer, i, color)) {
        Serial.println(F("bad move."));
      }
      else return;
    } while (true);
  }
};

//note is singleton
class Valuator
{
public:

  BoardLineArray board;

  Valuator() {
    init_compress();
    /*
    int len = 3;
    for (int i = 1;i <= 8;++i) {
    safety[i - 1] = new SafetyT[len];
    memset(safety[i - 1], 0, len * sizeof(safety[i - 1][0]));
    len = len * 3;
    }
    */
    for (int i = 0;i < 10;++i) board[i] = Empty;
    board[0] = board[9] = Out;
    //    for (int i = 8; i >= 1;--i) CalcValuate(i);
    initValues();

    /*
    len = 4;
    for (int i = 1;i <= 8;++i) {
    printf("safety of length %i\n", len);
    for (int j = 0;j < len;++j) {
    if (safety[i - 1][j]) fprintf(stderr,"%8x ",safety[i - 1][j]);
    }
    len = len * 4;
    }
    */
  }
  ~Valuator() {
  }
  bool move(Square *&undo, int pos, Square color, bool check = false) {
    return ::move(undo, pos, color, board, LineDirections, check);

  }
  void undo(Square *&undo)
  {
    ::undo(undo, board);
  }

  int find_empty(BoardArray in)
  {
    int sum = 0;
    for (int i = 11;i <= 88;++i) sum += empty_sum[in[i]];
    return sum;
  }
  bool quiescent(BoardArray in)
  {
    if (Empty == in[88] && (Empty != in[77] || Empty != in[78]) || Empty != in[87]) return false;
    if (Empty == in[18] && (Empty != in[27] || Empty != in[28] || Empty != in[17])) return false;
    if (Empty == in[11] && (Empty != in[22] || Empty != in[21] || Empty != in[12])) return false;
    if (Empty == in[81] && (Empty != in[72] || Empty != in[71] || Empty != in[82])) return false;
    return true;
  }
  int find_simple_value(BoardArray in, Square root_color)
  {
    int s1 = 0, s2 = 0, s3 = 0, s4 = 0;
    int i;
    {
      //#pragma omp parallel for reduction(+:sum)
      for (i = 11; i <= 85; i += 4) {
        s1 += simple_sum[in[i]];
        s2 += simple_sum[in[1 + i]];
        s3 += simple_sum[in[2 + i]];
        s4 += simple_sum[in[3 + i]];
      }
    }
    //assert(root_color == White);
    const int sum = s1 + s2 + s3 + s4;
    if (root_color == Black) return -sum;
    return sum;
  }
  int find_value(BoardArray in, Square root_color, bool use_move_count, bool display)
  {
    for (int8_t i = 11;i <= 88;++i) aValuationArray[i] = 0;

    CompressedBoard cbs;
    int *store_value_in_table;

    for (int8_t i = 0;i < 8; i += 2) {
      BoardLine c = 0;
      BoardLine c2 = 0;

      for (int8_t j = Valuations[i].pos, j2 = Valuations[1 + i].pos, k = 1;k <= Valuations[i].len;++k, j += Valuations[i].dir, j2 += Valuations[i].dir) {
        c = (c << 2) + in[j];
        c2 = (c2 << 2) + in[j2];

      }

      cbs[i] = compress3(c);
      cbs[i + 1] = compress3(c2);
    }


    for (int8_t i = 0;Valuations[i].pos; i += 2) {
      BoardLine c;
      BoardLine c2;
      if (i < 8) {
        c = safety(Valuations[i].len - 1, cbs[i]);
        c2 = safety(Valuations[i].len - 1, cbs[i + 1]);
      }
      else {
        c = 0;
        c2 = 0;
        for (int8_t j = Valuations[i].pos, j2 = Valuations[1 + i].pos, k = 1;k <= Valuations[i].len;++k, j = j + Valuations[i].dir, j2 = j2 + Valuations[1 + i].dir) {
          c = (c << 2) + in[j];
          c2 = (c2 << 2) + in[j2];
        }
        c = safety(Valuations[i].len - 1, compress3(c));
        c2 = safety(Valuations[i].len - 1, compress3(c2));
      }
      int8_t s = shifts[Valuations[i].dir];
      int8_t s2 = shifts[Valuations[1 + i].dir];
      for (int8_t j = Valuations[i].pos + Valuations[i].dir*(Valuations[i].len - 1),
        j2 = Valuations[1 + i].pos + Valuations[1 + i].dir*(Valuations[i].len - 1),
        k = 1;k <= Valuations[i].len;++k,
        j = j - Valuations[i].dir,
        j2 = j2 - Valuations[1 + i].dir
        ) {
        aValuationArray[j] |= (c & 3) << s;
        aValuationArray[j2] |= (c2 & 3) << s2;
        c >>= 2;
        c2 >>= 2;
      }
    }
    //at this point I should have a board of safety values to flatten
    int32_t sum = 0;
    static int intrans[] = { 0,2,-2,0,0 };
    for (int i = 11;i <= 88;++i) sum += Values[aValuationArray[i]] + intrans[in[i]];
    if (display) {
      const char *p = ".*Ox#";
      Serial.println(F("          1      2      3      4      5      6      7      8"));
      for (int i = 0;i < 100;++i) {
        if (i % 10 == 0) {
          if (i == 0 || i == 90) Serial.print(F("   "));
          else { Serial.print(F(" "));Serial.print(i / 10);Serial.print(F(" ")); }
        }
        Serial.print( //aValuationArray[i],
          Values[aValuationArray[i]] + intrans[in[i]]);Serial.print(p[in[i]]);Serial.print(F(" "));
        if (i % 10 == 9) {Serial.println(F(""));      }
      }

    }
    if (use_move_count) {
      int32_t white_moves = 0, black_moves = 0;
      for (int8_t p = 11;p <= 88;++p) if (fast_move_check(p, White, in))white_moves += 7;
      for (int8_t p = 11;p <= 88;++p) if (fast_move_check(p, Black, in))black_moves += 7;

      /*
      for (int p = 11;p <= 88;++p) {
      bool m = fast_move_check(p, White, in);
      assert(m ==
      ::move(undo_buffer, p, White, in, Directions, true));

      if (m) {
      white_moves += 7;
      }
      }
      for (int p = 11;p <= 88;++p) {
      bool m = fast_move_check(p, Black, in);
      assert(m == ::move(undo_buffer, p, Black, in, Directions, true));
      if (m) {
      black_moves += 7;
      }
      }
      */

      if (white_moves < 2 && black_moves>white_moves) black_moves <<= 2 - white_moves;
      else if (black_moves < 2 && white_moves>black_moves) white_moves <<= 2 - black_moves;
      sum = sum + white_moves - black_moves;

      if (white_moves == 0 && black_moves == 0) {
        if (find_simple_value(in, root_color) < 0) sum = -100000;
        else sum = 100000;

        //        *store_value_in_table = sum;
        //        printf("end of game %i \n",sum);
        return sum;
      }
    }
    ///*

    //11 12 13 14 15 16 17 18
    //21 22 23 24 25 26 27 28
    //31 32 33 34 35 36 37 38
    //41 42 43 44 45 46 47 48
    //51 52 53 54 55 56 57 58
    //61 62 63 64 65 66 67 68
    //71 72 73 74 75 76 77 78
    //81 82 83 84 85 86 87 88


    const int8_t corner_fix2[] = { 11,18,81,88 };
    for (int8_t i = 0;i < 4;++i) {
      if (board[corner_fix2[i]] == White) sum += 1800; else sum -= 1800;
    }


    //setup scoring
    const int8_t corner_fix4[] = { 11,12,22,21,18,17,27,28,81,71,72,82,88,78,77,87 };
    for (int8_t i = 0;i < 16;i += 4) {
      if (board[corner_fix4[i]] == Empty) {
        if (corner_fix4[i + 1] == White) sum -= 450;
        else if (corner_fix4[i + 1] == White) sum += 450;
        else {
          if (move(undo_buffer, corner_fix4[i + 1], White, true)) sum -= 160;
          if (move(undo_buffer, corner_fix4[i + 1], Black, true)) sum += 160;
        }

        if (corner_fix4[i + 3] == White) sum -= 450;
        else if (corner_fix4[i + 3] == White) sum += 450;
        else {
          if (move(undo_buffer, corner_fix4[i + 3], White, true)) sum -= 160;
          if (move(undo_buffer, corner_fix4[i + 3], Black, true)) sum += 160;
        }

        if (corner_fix4[i + 2] == White) sum -= 800;
        else if (corner_fix4[i + 2] == White) sum += 800;
        else {
          if (move(undo_buffer, corner_fix4[i + 2], White, true)) sum -= 500;
          if (move(undo_buffer, corner_fix4[i + 2], Black, true)) sum += 500;
        }
      }
    }

    //*/


    //    assert(root_color == White);
    if (root_color == Black) sum = -sum;
    //? how to count options?
    //    *store_value_in_table = sum;
    //    printf("%i\n", sum);
    return sum;
  }

#define NUM_PRIMARY 4
#define NUM_PRIMARY_MAX (2*NUM_PRIMARY)


  const int8_t inner_corners[4] = { 22,27,72,77 };
  const int8_t corners[4] = { 11,18,81,88 };
  void remove_dangerous_moves(int32_t *moves, BoardArray in, Square color)
  {

    //11 12 13 14 15 16 17 18
    //21 22 23 24 25 26 27 28
    //31 32 33 34 35 36 37 38
    //41 42 43 44 45 46 47 48
    //51 52 53 54 55 56 57 58
    //61 62 63 64 65 66 67 68
    //71 72 73 74 75 76 77 78
    //81 82 83 84 85 86 87 88
    /*
    if corner not taken then any move that sets in from corner to my color is dangerous
    any that makes side gap is slightly dangerous - hard to test
    any that sets side to my corner is very slightly dangerous
    */
    bool danger[NUM_PRIMARY_MAX + 1];
    bool corners_not_taken[4] = { in[11] == Empty,in[18] == Empty,in[81] == Empty,in[88] == Empty };
    bool inner_corners_not_taken[4] = { in[22] != color,in[27] != color,in[72] != color,in[77] != color };
    int count = 0;
    for (int i = 1;i <= moves[0];++i) {
      //::move(undo_buffer, moves[i], color, in, Directions);
      fast_move(undo_buffer, moves[i], color, in);
      bool dangerous = false;
      for (int c = 0;c < 4;++c) {
        if (corners_not_taken[c] && inner_corners_not_taken[c] && in[inner_corners[c]] == color && in[corners[c]] != color
          ) {
          dangerous = true;
          ++count;
          break;
        }
      }
      ::undo(undo_buffer, in);
      danger[i] = dangerous;
    }
    if (count == 0 || count == moves[0]) return;
    int copy[NUM_PRIMARY_MAX + 1];

    for (int i = 0;i <= moves[0];++i) copy[i] = moves[i];
    moves[0] = 0;
    int j = 1;
    for (int i = 1;i <= copy[0];++i)
      if (!danger[i]) {
        ++moves[0];
        moves[moves[0]] = copy[i];
      }

  }
};

Valuator valuator;
bool in_endgame = false;

int Board::find_move(int depth, Square color, bool use_move_count)
{
#ifdef SIMPLE_SEARCH
  int empty_depth = valuator.find_empty(board);
  int moveAt = 0;
  if (empty_depth < 19) {
    printf(F("endgame "));
    endgame_alphabeta(moveAt, empty_depth, -INT_MAX, INT_MAX, color, color, false);
  }
  else alphabeta(moveAt, depth, -INT_MAX, INT_MAX, color, color, use_move_count);
  return moveAt;
#else
//Serial.println(F("before find empty"));
  int empty_depth = valuator.find_empty(board);
//Serial.println(F("after find empty"));
  int moveAt = 0;
  if (empty_depth < 13) {
    Serial.println(F("endgame "));
    if (in_endgame == false) {
      in_endgame = true;

    }
    endgame_alphabeta(moveAt, empty_depth, -INT_MAX, INT_MAX, color, color, false);
    return moveAt;
  }
  in_endgame = false;
  int32_t move_collection[NUM_PRIMARY_MAX + 1];

  // ed = 24/24  ed=26/22 ed=28/20 ed=30/18 
  //prime the endgame refutation
  //  int endgame_reflect = 48 - empty_depth;
  //  if (endgame_reflect>0 ) endgame_alphabeta(moveAt, endgame_reflect, -INT_MAX, INT_MAX, color, color, false);
//Serial.println(F("before find collect_primary_alphabeta"));
  if (collect_primary_alphabeta(NUM_PRIMARY, NUM_PRIMARY_MAX, move_collection, depth - 2, color, color, use_move_count)) {
//Serial.println(F("after find collect_primary_alphabeta"));

    valuator.remove_dangerous_moves(move_collection, board, color);
    //undo(undo_buffer, board);
    movelist_alphabeta(move_collection, moveAt, depth, color, color, use_move_count);
    //alphabeta(moveAt, depth, -INT_MAX, INT_MAX, color, color, use_move_count);
    return moveAt;
  }
  return 0;
  //bool Board::collect_primary_alphabeta(int collect, int * move_collection, int depth, Square color, Square root_color, bool use_move_count)

#endif
}

int32_t Board::endgame_alphabeta(int &move_at, int depth, int32_t alpha, int32_t beta, Square color, Square root_color, bool passed)
{
  if (depth <= 0) {
    return valuator.find_simple_value(board, root_color);
  }
  int at, move_number = 0;
  int inner_move;
  if (color == root_color) { //maximizing
    int32_t v = -INT_MAX;
    while (endgame_next_move(move_number, at, color, depth)) {

      int32_t n = endgame_alphabeta(inner_move, depth - 1, alpha, beta, other_color(color), root_color);
      if (n > v) {
        v = n;
        move_at = at;
        endgame_killer(move_number - 1, color, depth);
      }
      if (v > alpha) {
        alpha = v;
      }

      undo(undo_buffer, board);
      if (beta <= alpha) {
        break; //cut off
      }
    }
    if (v == -INT_MAX) {
      if (passed) return valuator.find_simple_value(board, root_color);
      move_at = 0;
      return endgame_alphabeta(inner_move, depth, alpha, beta, other_color(color), root_color, true);//passed
    }
    return v;
  }
  else {//minimizing
    int32_t v = INT_MAX;
    while (endgame_next_move(move_number, at, color, depth)) {
      int32_t n = endgame_alphabeta(inner_move, depth - 1, alpha, beta, other_color(color), root_color);
      if (n < v) {
        v = n;
        move_at = at;
        endgame_killer(move_number - 1, color, depth);
      }
      if (v < beta) {
        beta = v;
      }
      undo(undo_buffer, board);
      if (beta <= alpha) {
        break; //cut off
      }
    }
    if (v == INT_MAX) {
      if (passed) return valuator.find_simple_value(board, root_color);
      move_at = 0;
      return endgame_alphabeta(inner_move, depth, alpha, beta, other_color(color), root_color, true);//passed
    }
    move_at = at;
  }

};



bool Board::collect_primary_alphabeta(int32_t collect, int32_t collect_max, int32_t * move_collection, int depth, Square color, Square root_color, bool use_move_count)
{
  int current_move_pos = 0;
  do {
    int32_t alpha = -INT_MAX;
    int32_t beta = INT_MAX;
    move_collection[0] = ++current_move_pos;
    move_collection[current_move_pos] = 0;
    //depth will never be zero at this level
    int at, move_number = 0;
    int  inner_move;
    if (color == root_color) { //maximizing
      int32_t v = -INT_MAX;
      while (next_move_not_in(move_collection, move_number, at, color, depth)) {
//dump_undos();
//print();
        int32_t n = alphabeta(inner_move, depth - 1, alpha, beta, other_color(color), root_color, use_move_count);
//dump_undos();
        if (n > v) {
          //just take bonehead move out of the list if there's an alt
          //* 
          if (at == 22 || at == 27 || at == 77 || at == 72) collect = __min(collect_max, collect + 1);
          //*/
          v = n;
          move_collection[current_move_pos] = at;
          //          killer(move_number - 1, color);
        }
        if (v > alpha) {
          alpha = v;
        }

        undo(undo_buffer, board);
        if (beta <= alpha) {
          break; //cut off
        }
      }
      if (v == -INT_MAX) {
        //        move_collection[current_move_pos] = 0;
// dump_undos();       
        v = alphabeta(inner_move, depth - 1, alpha, beta, other_color(color), root_color, use_move_count);//passed
//dump_undos();
        continue;
      }
      continue;
    }
    else {//minimizing
      int32_t v = INT_MAX;
      while (next_move_not_in(move_collection, move_number, at, color, depth)) {
        int32_t n = alphabeta(inner_move, depth - 1, alpha, beta, other_color(color), root_color, use_move_count);
        //{}{}{} getting an extra undo somewhere
        if (n < v) {
          //just take bonehead move out of the list if there's an alt
          //*
          if (at == 22 || at == 27 || at == 77 || at == 72) collect = __min(collect_max, collect + 1);
          //*/
          v = n;
          move_collection[current_move_pos] = at;
          //          killer(move_number - 1, color);
        }
        if (v < beta) {
          beta = v;
        }
        undo(undo_buffer, board);
        if (beta <= alpha) {
          break; //cut off
        }
      }
      if (v == INT_MAX) {
        //        move_collection[current_move_pos] = 0;
        v = alphabeta(inner_move, depth - 1, alpha, beta, other_color(color), root_color, use_move_count);//passed
        continue;
      }
      move_collection[current_move_pos] = at;
      continue;
    }
  } while (current_move_pos < collect);
  while (move_collection[0] != 0 && move_collection[move_collection[0]] == 0) {
    --move_collection[0];
  }
  return move_collection[0] != 0;
}

int32_t Board::movelist_alphabeta(int32_t* move_collection, int &move_at, int depth, Square color, Square root_color, bool use_move_count)
{
  int32_t alpha = -INT_MAX;
  int32_t beta = INT_MAX;
  int at, move_number = 0;
  int move_list_counter = 0;
  int inner_move;
  if (color == root_color) { //maximizing
    int32_t v = -INT_MAX;
    while (++move_list_counter <= move_collection[0]) {
      at = move_collection[move_list_counter];
      bool moved = move(undo_buffer, at, color);
//dump_undos();      
      int32_t n = alphabeta(inner_move, depth - 1, alpha, beta, other_color(color), root_color, use_move_count);
      if (n > v) {
        v = n;
        move_at = at;
        //        killer(move_number - 1, color);
      }
      if (v > alpha) {
        alpha = v;
      }

      undo(undo_buffer, board);
      if (beta <= alpha) {
        break; //cut off
      }
    }
    if (v == -INT_MAX) {
      move_at = 0;
      return alphabeta(inner_move, depth - 1, alpha, beta, other_color(color), root_color, use_move_count);//passed
    }
    return v;
  }
  else {//minimizing
    int32_t v = INT_MAX;
    while (++move_list_counter <= move_collection[0]) {
      at = move_collection[move_list_counter];
      bool moved = move(undo_buffer, at, color);
//dump_undos();      
      int32_t n = alphabeta(inner_move, depth - 1, alpha, beta, other_color(color), root_color, use_move_count);
      if (n < v) {
        v = n;
        move_at = at;
        //        killer(move_number - 1, color);
      }
      if (v < beta) {
        beta = v;
      }
      undo(undo_buffer, board);
      if (beta <= alpha) {
        break; //cut off
      }
    }
    if (v == INT_MAX) {
      move_at = 0;
      return alphabeta(inner_move, depth - 1, alpha, beta, other_color(color), root_color, use_move_count);//passed
    }
    move_at = at;
    return v;
  }

}


int32_t Board::alphabeta(int &move_at, int depth, int32_t alpha, int32_t beta, Square color, Square root_color, bool use_move_count)
{
#if (QUIESCENT_DEPTH!=0)
  if (depth == -QUIESCENT_DEPTH || (depth <= 0 && valuator.quiescent(board)) || end_of_game()) {
#else
  if (depth <= 0 || end_of_game()) {
#endif
    return valuator.find_value(board, root_color, use_move_count, false);//display
  }
  int at, move_number = 0;
  int inner_move;
  if (color == root_color) { //maximizing
    int32_t v = -INT_MAX;
    while (next_move(move_number, at, color, depth)) {
dump_undos();
//Serial.print(F("alphabeta "));Serial.println(depth);
//    print();
      int32_t *to_store, n;
      //{}{}{} rewrite to fill only on no cut wait would that have to be 
      //recursive?  Needs more research
      //      if (TranspositionEntry::find_and_fill(to_store, board, depth)) {
      //        n = *to_store;
      //      }
      //      else {
      n = alphabeta(inner_move, depth - 1, alpha, beta, other_color(color), root_color, use_move_count);
//dump_undos();
      //        *to_store = n;
      //      }
      if (n > v) {
        v = n;
        move_at = at;
        killer(move_number - 1, color, depth);
      }
      if (v > alpha) {
        alpha = v;
      }

      undo(undo_buffer, board);
      if (beta <= alpha) {
        break; //cut off
      }
    }
    if (v == -INT_MAX) {
      move_at = 0;
      return alphabeta(inner_move, depth - 1, alpha, beta, other_color(color), root_color, use_move_count);//passed
    }
    return v;
  }
  else {//minimizing
    int32_t v = INT_MAX;
    while (next_move(move_number, at, color, depth)) {
//Serial.print(F("alphabeta "));Serial.println(depth);
//    print();
//dump_undos();
      int32_t *to_store, n;
      //      if (TranspositionEntry::find_and_fill(to_store, board, depth)) {
      //        n = *to_store;
      //      }
      //      else {
      n = alphabeta(inner_move, depth - 1, alpha, beta, other_color(color), root_color, use_move_count);
//dump_undos();
      //        *to_store = n;
      //      }
      if (n < v) {
        v = n;
        move_at = at;
        killer(move_number - 1, color, depth);
      }
      if (v < beta) {
        beta = v;
      }
      undo(undo_buffer, board);
      if (beta <= alpha) {
        break; //cut off
      }
    }
    if (v == INT_MAX) {
      move_at = 0;
      return alphabeta(inner_move, depth - 1, alpha, beta, other_color(color), root_color, use_move_count);//passed
    }
    move_at = at;
    return v;
  }

  }



void setup() 
{
  pinMode(13, OUTPUT);  
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

  Serial.println(F("Hello World"));

  Board b;
  Serial.println(F("board"));
  
  bool black_passed;
  bool white_passed;
  do {
    if (!b.can_move(Black)) {
      if (white_passed) {
        Serial.println("game over");
        break;
      }
      Serial.println("Black must pass");
      black_passed = true;
    }
      else {
        b.input(Black, "b6");
      black_passed = false;
    }
    //increment_killers();
//    valuator.find_value(b.board, White,false, true);
    if (!b.can_move(White)) {
      if (black_passed) {
        Serial.println("game over");
        break;
      }
      Serial.println("White must pass");
      white_passed = true;
    }
    else {
      b.input(White);
      white_passed = false;
    }
    //increment_killers();
    //    valuator.find_value(b.board, Black, false,true);
  } while (true);
  b.print();
 
  // compute and print the elapsed time in millisec
}




void loop() {
  // put your main code here, to run repeatedly:

}
